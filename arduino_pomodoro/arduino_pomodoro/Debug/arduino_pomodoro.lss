
arduino_pomodoro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000e06  00000e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800106  00800106  00000ea0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041e0  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000176e  00000000  00000000  000053e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185a  00000000  00000000  00006b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  000083b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b4  00000000  00000000  00008b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a0d  00000000  00000000  00009bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a5 32       	cpi	r26, 0x25	; 37
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>

000000de <__do_copy_data>:
  de:	11 e0       	ldi	r17, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	e6 e0       	ldi	r30, 0x06	; 6
  e6:	fe e0       	ldi	r31, 0x0E	; 14
  e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	a6 30       	cpi	r26, 0x06	; 6
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>
  f4:	0e 94 84 04 	call	0x908	; 0x908 <main>
  f8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <_ZN14BatteryMonitorC1Ehhhm>:
  this->startOfPeriod = this->prevTime;
  this->monitorPeriod = monitorPeriod;
  this->isMonitoring = false;
}

BatteryMonitor::~BatteryMonitor()
 100:	8f 92       	push	r8
 102:	9f 92       	push	r9
 104:	af 92       	push	r10
 106:	bf 92       	push	r11
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
 11a:	86 2f       	mov	r24, r22
 11c:	c4 2e       	mov	r12, r20
 11e:	d2 2e       	mov	r13, r18
 120:	6c 87       	std	Y+12, r22	; 0x0c
 122:	4d 87       	std	Y+13, r20	; 0x0d
 124:	2e 87       	std	Y+14, r18	; 0x0e
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	0e 94 4c 05 	call	0xa98	; 0xa98 <pinMode>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	8c 2d       	mov	r24, r12
 130:	0e 94 4c 05 	call	0xa98	; 0xa98 <pinMode>
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	8d 2d       	mov	r24, r13
 138:	0e 94 4c 05 	call	0xa98	; 0xa98 <pinMode>
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	8c 85       	ldd	r24, Y+12	; 0x0c
 140:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	8e 85       	ldd	r24, Y+14	; 0x0e
 148:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
 14c:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 150:	68 83       	st	Y, r22
 152:	79 83       	std	Y+1, r23	; 0x01
 154:	8a 83       	std	Y+2, r24	; 0x02
 156:	9b 83       	std	Y+3, r25	; 0x03
 158:	68 87       	std	Y+8, r22	; 0x08
 15a:	79 87       	std	Y+9, r23	; 0x09
 15c:	8a 87       	std	Y+10, r24	; 0x0a
 15e:	9b 87       	std	Y+11, r25	; 0x0b
 160:	ec 82       	std	Y+4, r14	; 0x04
 162:	fd 82       	std	Y+5, r15	; 0x05
 164:	0e 83       	std	Y+6, r16	; 0x06
 166:	1f 83       	std	Y+7, r17	; 0x07
 168:	1f 86       	std	Y+15, r1	; 0x0f
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	bf 90       	pop	r11
 17c:	af 90       	pop	r10
 17e:	9f 90       	pop	r9
 180:	8f 90       	pop	r8
 182:	08 95       	ret

00000184 <_ZN14BatteryMonitor18checkBatteryStatusEv>:
{
}

void BatteryMonitor::checkBatteryStatus()
{
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
  unsigned long curtTime = millis();
 192:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 196:	6b 01       	movw	r12, r22
 198:	7c 01       	movw	r14, r24
  if (curtTime - this->prevTime > monitorPeriod)
 19a:	88 81       	ld	r24, Y
 19c:	99 81       	ldd	r25, Y+1	; 0x01
 19e:	aa 81       	ldd	r26, Y+2	; 0x02
 1a0:	bb 81       	ldd	r27, Y+3	; 0x03
 1a2:	b7 01       	movw	r22, r14
 1a4:	a6 01       	movw	r20, r12
 1a6:	48 1b       	sub	r20, r24
 1a8:	59 0b       	sbc	r21, r25
 1aa:	6a 0b       	sbc	r22, r26
 1ac:	7b 0b       	sbc	r23, r27
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	ae 81       	ldd	r26, Y+6	; 0x06
 1b4:	bf 81       	ldd	r27, Y+7	; 0x07
 1b6:	84 17       	cp	r24, r20
 1b8:	95 07       	cpc	r25, r21
 1ba:	a6 07       	cpc	r26, r22
 1bc:	b7 07       	cpc	r27, r23
 1be:	98 f5       	brcc	.+102    	; 0x226 <_ZN14BatteryMonitor18checkBatteryStatusEv+0xa2>
  {
    digitalWrite(this->batteryEnablePin, LOW);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	8c 85       	ldd	r24, Y+12	; 0x0c
 1c4:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
    if (!this->isMonitoring)
 1c8:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ca:	81 11       	cpse	r24, r1
 1cc:	08 c0       	rjmp	.+16     	; 0x1de <_ZN14BatteryMonitor18checkBatteryStatusEv+0x5a>
    {
      this->isMonitoring = true;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8f 87       	std	Y+15, r24	; 0x0f
      this->startOfPeriod = millis();
 1d2:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 1d6:	68 87       	std	Y+8, r22	; 0x08
 1d8:	79 87       	std	Y+9, r23	; 0x09
 1da:	8a 87       	std	Y+10, r24	; 0x0a
 1dc:	9b 87       	std	Y+11, r25	; 0x0b
    }
    if (curtTime - this->startOfPeriod > 20)
 1de:	88 85       	ldd	r24, Y+8	; 0x08
 1e0:	99 85       	ldd	r25, Y+9	; 0x09
 1e2:	aa 85       	ldd	r26, Y+10	; 0x0a
 1e4:	bb 85       	ldd	r27, Y+11	; 0x0b
 1e6:	c8 1a       	sub	r12, r24
 1e8:	d9 0a       	sbc	r13, r25
 1ea:	ea 0a       	sbc	r14, r26
 1ec:	fb 0a       	sbc	r15, r27
 1ee:	85 e1       	ldi	r24, 0x15	; 21
 1f0:	c8 16       	cp	r12, r24
 1f2:	d1 04       	cpc	r13, r1
 1f4:	e1 04       	cpc	r14, r1
 1f6:	f1 04       	cpc	r15, r1
 1f8:	b0 f0       	brcs	.+44     	; 0x226 <_ZN14BatteryMonitor18checkBatteryStatusEv+0xa2>
    {
      bool batteryStat = digitalRead(this->batteryMonitorPin);
 1fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 1fc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <digitalRead>
      if (batteryStat == LOW)
 200:	89 2b       	or	r24, r25
 202:	11 f4       	brne	.+4      	; 0x208 <_ZN14BatteryMonitor18checkBatteryStatusEv+0x84>
      {
        digitalWrite(this->batteryLEDPin, LOW);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	01 c0       	rjmp	.+2      	; 0x20a <_ZN14BatteryMonitor18checkBatteryStatusEv+0x86>
      }
      else
      {
        digitalWrite(this->batteryLEDPin, HIGH);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	8e 85       	ldd	r24, Y+14	; 0x0e
 20c:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
      }
      digitalWrite(this->batteryEnablePin, HIGH);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	8c 85       	ldd	r24, Y+12	; 0x0c
 214:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
      this->prevTime = millis();
 218:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 21c:	68 83       	st	Y, r22
 21e:	79 83       	std	Y+1, r23	; 0x01
 220:	8a 83       	std	Y+2, r24	; 0x02
 222:	9b 83       	std	Y+3, r25	; 0x03
      this->isMonitoring = false;
 224:	1f 86       	std	Y+15, r1	; 0x0f
    }
  }
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <_ZN6ButtonC1Ehbb>:
	this->lastDebounceTime = 0;
}

Button::~Button()
{
	disattach();
 234:	fc 01       	movw	r30, r24
 236:	60 83       	st	Z, r22
 238:	41 83       	std	Z+1, r20	; 0x01
 23a:	22 83       	std	Z+2, r18	; 0x02
 23c:	13 82       	std	Z+3, r1	; 0x03
 23e:	14 82       	std	Z+4, r1	; 0x04
 240:	15 82       	std	Z+5, r1	; 0x05
 242:	16 82       	std	Z+6, r1	; 0x06
 244:	08 95       	ret

00000246 <_ZN6Button10isRiseEdgeEv>:
	digitalWrite(pin, LOW);
	pinMode(pin, INPUT);
}

bool Button::isRiseEdge()
{
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
	bool res = false;
	unsigned long debounceDelay = 50;
	int reading = digitalRead(pin);
 258:	88 81       	ld	r24, Y
 25a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <digitalRead>
 25e:	8c 01       	movw	r16, r24

	if (reading != lastButtonState)
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	08 17       	cp	r16, r24
 266:	19 07       	cpc	r17, r25
 268:	31 f0       	breq	.+12     	; 0x276 <_ZN6Button10isRiseEdgeEv+0x30>
	{
		lastDebounceTime = millis();
 26a:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 26e:	6b 83       	std	Y+3, r22	; 0x03
 270:	7c 83       	std	Y+4, r23	; 0x04
 272:	8d 83       	std	Y+5, r24	; 0x05
 274:	9e 83       	std	Y+6, r25	; 0x06
	}

	if (abs(millis() - lastDebounceTime) > debounceDelay)
 276:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 27a:	6b 01       	movw	r12, r22
 27c:	7c 01       	movw	r14, r24
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	9c 81       	ldd	r25, Y+4	; 0x04
 282:	ad 81       	ldd	r26, Y+5	; 0x05
 284:	be 81       	ldd	r27, Y+6	; 0x06
 286:	c8 16       	cp	r12, r24
 288:	d9 06       	cpc	r13, r25
 28a:	ea 06       	cpc	r14, r26
 28c:	fb 06       	cpc	r15, r27
 28e:	79 f0       	breq	.+30     	; 0x2ae <_ZN6Button10isRiseEdgeEv+0x68>
 290:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 294:	cb 80       	ldd	r12, Y+3	; 0x03
 296:	dc 80       	ldd	r13, Y+4	; 0x04
 298:	ed 80       	ldd	r14, Y+5	; 0x05
 29a:	fe 80       	ldd	r15, Y+6	; 0x06
 29c:	9b 01       	movw	r18, r22
 29e:	ac 01       	movw	r20, r24
 2a0:	2c 19       	sub	r18, r12
 2a2:	3d 09       	sbc	r19, r13
 2a4:	4e 09       	sbc	r20, r14
 2a6:	5f 09       	sbc	r21, r15
 2a8:	69 01       	movw	r12, r18
 2aa:	7a 01       	movw	r14, r20
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <_ZN6Button10isRiseEdgeEv+0x74>
 2ae:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 2b2:	c6 1a       	sub	r12, r22
 2b4:	d7 0a       	sbc	r13, r23
 2b6:	e8 0a       	sbc	r14, r24
 2b8:	f9 0a       	sbc	r15, r25
 2ba:	33 e3       	ldi	r19, 0x33	; 51
 2bc:	c3 16       	cp	r12, r19
 2be:	d1 04       	cpc	r13, r1
 2c0:	e1 04       	cpc	r14, r1
 2c2:	f1 04       	cpc	r15, r1
 2c4:	60 f0       	brcs	.+24     	; 0x2de <_ZN6Button10isRiseEdgeEv+0x98>
	{
		if (reading != buttonState)
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	08 17       	cp	r16, r24
 2cc:	19 07       	cpc	r17, r25
 2ce:	39 f0       	breq	.+14     	; 0x2de <_ZN6Button10isRiseEdgeEv+0x98>
		{
			buttonState = reading;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	01 15       	cp	r16, r1
 2d4:	11 05       	cpc	r17, r1
 2d6:	09 f4       	brne	.+2      	; 0x2da <_ZN6Button10isRiseEdgeEv+0x94>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	8a 83       	std	Y+2, r24	; 0x02
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <_ZN6Button10isRiseEdgeEv+0x9a>
	pinMode(pin, INPUT);
}

bool Button::isRiseEdge()
{
	bool res = false;
 2de:	80 e0       	ldi	r24, 0x00	; 0
			{
				res = true;
			}
		}
	}
	lastButtonState = reading;
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	01 2b       	or	r16, r17
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <_ZN6Button10isRiseEdgeEv+0xa2>
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	99 83       	std	Y+1, r25	; 0x01
	return res;
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	08 95       	ret

000002fc <_ZN3LEDC1Ehb>:
  }
}

void LED::resetBlink()
{
  this->blinkCount = 0;
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	86 2f       	mov	r24, r22
 306:	14 2f       	mov	r17, r20
 308:	68 83       	st	Y, r22
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 4c 05 	call	0xa98	; 0xa98 <pinMode>
 310:	61 2f       	mov	r22, r17
 312:	88 81       	ld	r24, Y
 314:	0e 94 88 05 	call	0xb10	; 0xb10 <digitalWrite>
 318:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 31c:	1d 82       	std	Y+5, r1	; 0x05
 31e:	69 83       	std	Y+1, r22	; 0x01
 320:	7a 83       	std	Y+2, r23	; 0x02
 322:	8b 83       	std	Y+3, r24	; 0x03
 324:	9c 83       	std	Y+4, r25	; 0x04
 326:	6e 83       	std	Y+6, r22	; 0x06
 328:	7f 83       	std	Y+7, r23	; 0x07
 32a:	88 87       	std	Y+8, r24	; 0x08
 32c:	99 87       	std	Y+9, r25	; 0x09
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <_ZN3LED2onEv>:
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	0c 94 88 05 	jmp	0xb10	; 0xb10 <digitalWrite>

00000340 <_ZN3LED3offEv>:
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	0c 94 88 05 	jmp	0xb10	; 0xb10 <digitalWrite>

0000034a <_ZN3LED8getStateEv>:
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <digitalRead>
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	89 2b       	or	r24, r25
 356:	09 f4       	brne	.+2      	; 0x35a <_ZN3LED8getStateEv+0x10>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	82 2f       	mov	r24, r18
 35c:	08 95       	ret

0000035e <_ZN3LED5blinkEjh>:
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
 370:	8d 81       	ldd	r24, Y+5	; 0x05
 372:	84 17       	cp	r24, r20
 374:	50 f5       	brcc	.+84     	; 0x3ca <_ZN3LED5blinkEjh+0x6c>
 376:	8b 01       	movw	r16, r22
 378:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	ab 81       	ldd	r26, Y+3	; 0x03
 386:	bc 81       	ldd	r27, Y+4	; 0x04
 388:	b7 01       	movw	r22, r14
 38a:	a6 01       	movw	r20, r12
 38c:	48 1b       	sub	r20, r24
 38e:	59 0b       	sbc	r21, r25
 390:	6a 0b       	sbc	r22, r26
 392:	7b 0b       	sbc	r23, r27
 394:	c8 01       	movw	r24, r16
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	84 17       	cp	r24, r20
 39c:	95 07       	cpc	r25, r21
 39e:	a6 07       	cpc	r26, r22
 3a0:	b7 07       	cpc	r27, r23
 3a2:	98 f4       	brcc	.+38     	; 0x3ca <_ZN3LED5blinkEjh+0x6c>
 3a4:	ce 01       	movw	r24, r28
 3a6:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN3LED8getStateEv>
 3aa:	81 11       	cpse	r24, r1
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_ZN3LED5blinkEjh+0x58>
 3ae:	ce 01       	movw	r24, r28
 3b0:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN3LED2onEv>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <_ZN3LED5blinkEjh+0x64>
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN3LED3offEv>
 3bc:	8d 81       	ldd	r24, Y+5	; 0x05
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	8d 83       	std	Y+5, r24	; 0x05
 3c2:	c9 82       	std	Y+1, r12	; 0x01
 3c4:	da 82       	std	Y+2, r13	; 0x02
 3c6:	eb 82       	std	Y+3, r14	; 0x03
 3c8:	fc 82       	std	Y+4, r15	; 0x04
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	08 95       	ret

000003dc <_ZN3LED11periodBlinkEjhj>:
}

void LED::periodBlink(unsigned int pulseWidth, byte blinkTimes, unsigned int period)
{
 3dc:	4f 92       	push	r4
 3de:	5f 92       	push	r5
 3e0:	6f 92       	push	r6
 3e2:	7f 92       	push	r7
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	8c 01       	movw	r16, r24
 3f8:	b4 2e       	mov	r11, r20
  pulseWidth = pulseWidth < 100 ? 100 : pulseWidth;
 3fa:	eb 01       	movw	r28, r22
 3fc:	64 36       	cpi	r22, 0x64	; 100
 3fe:	71 05       	cpc	r23, r1
 400:	10 f4       	brcc	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	c4 e6       	ldi	r28, 0x64	; 100
 404:	d0 e0       	ldi	r29, 0x00	; 0
  period = period < pulseWidth * blinkTimes * 2 ? pulseWidth * blinkTimes * 2 : period;
 406:	8b 2d       	mov	r24, r11
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	8c 9f       	mul	r24, r28
 410:	60 01       	movw	r12, r0
 412:	8d 9f       	mul	r24, r29
 414:	d0 0c       	add	r13, r0
 416:	9c 9f       	mul	r25, r28
 418:	d0 0c       	add	r13, r0
 41a:	11 24       	eor	r1, r1
 41c:	c2 16       	cp	r12, r18
 41e:	d3 06       	cpc	r13, r19
 420:	08 f4       	brcc	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	69 01       	movw	r12, r18
  unsigned long curtTime = millis();
 424:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
  if (curtTime - this->prevPeriod > period)
 428:	f8 01       	movw	r30, r16
 42a:	46 80       	ldd	r4, Z+6	; 0x06
 42c:	57 80       	ldd	r5, Z+7	; 0x07
 42e:	60 84       	ldd	r6, Z+8	; 0x08
 430:	71 84       	ldd	r7, Z+9	; 0x09
 432:	9b 01       	movw	r18, r22
 434:	ac 01       	movw	r20, r24
 436:	24 19       	sub	r18, r4
 438:	35 09       	sbc	r19, r5
 43a:	46 09       	sbc	r20, r6
 43c:	57 09       	sbc	r21, r7
 43e:	e1 2c       	mov	r14, r1
 440:	f1 2c       	mov	r15, r1
 442:	c2 16       	cp	r12, r18
 444:	d3 06       	cpc	r13, r19
 446:	e4 06       	cpc	r14, r20
 448:	f5 06       	cpc	r15, r21
 44a:	90 f4       	brcc	.+36     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
  }
}

void LED::resetBlink()
{
  this->blinkCount = 0;
 44c:	15 82       	std	Z+5, r1	; 0x05
  period = period < pulseWidth * blinkTimes * 2 ? pulseWidth * blinkTimes * 2 : period;
  unsigned long curtTime = millis();
  if (curtTime - this->prevPeriod > period)
  {
    this->resetBlink();
    this->prevPeriod = curtTime;
 44e:	66 83       	std	Z+6, r22	; 0x06
 450:	77 83       	std	Z+7, r23	; 0x07
 452:	80 87       	std	Z+8, r24	; 0x08
 454:	91 87       	std	Z+9, r25	; 0x09
    this->prevBlinkTime = curtTime - (pulseWidth + 10); // sync  on/off period with blink period
 456:	9e 01       	movw	r18, r28
 458:	26 5f       	subi	r18, 0xF6	; 246
 45a:	3f 4f       	sbci	r19, 0xFF	; 255
 45c:	dc 01       	movw	r26, r24
 45e:	cb 01       	movw	r24, r22
 460:	82 1b       	sub	r24, r18
 462:	93 0b       	sbc	r25, r19
 464:	a1 09       	sbc	r26, r1
 466:	b1 09       	sbc	r27, r1
 468:	81 83       	std	Z+1, r24	; 0x01
 46a:	92 83       	std	Z+2, r25	; 0x02
 46c:	a3 83       	std	Z+3, r26	; 0x03
 46e:	b4 83       	std	Z+4, r27	; 0x04
  }
  this->blink(pulseWidth, blinkTimes);
 470:	4b 2d       	mov	r20, r11
 472:	be 01       	movw	r22, r28
 474:	c8 01       	movw	r24, r16
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	7f 90       	pop	r7
 48a:	6f 90       	pop	r6
 48c:	5f 90       	pop	r5
 48e:	4f 90       	pop	r4
  {
    this->resetBlink();
    this->prevPeriod = curtTime;
    this->prevBlinkTime = curtTime - (pulseWidth + 10); // sync  on/off period with blink period
  }
  this->blink(pulseWidth, blinkTimes);
 490:	0c 94 af 01 	jmp	0x35e	; 0x35e <_ZN3LED5blinkEjh>

00000494 <_ZN3LED7powerOnEv>:
}

void LED::powerOn()
{
  this->on();
 494:	0c 94 9b 01 	jmp	0x336	; 0x336 <_ZN3LED2onEv>

00000498 <_ZN3LED8powerOffEv>:
}

void LED::powerOff()
{
  this->off();
 498:	0c 94 a0 01 	jmp	0x340	; 0x340 <_ZN3LED3offEv>

0000049c <_ZN3LED12timerRunningEv>:
}

void LED::timerRunning()
{
  this->periodBlink(200, 1, 400);
 49c:	20 e9       	ldi	r18, 0x90	; 144
 49e:	31 e0       	ldi	r19, 0x01	; 1
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	68 ec       	ldi	r22, 0xC8	; 200
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_ZN3LED11periodBlinkEjhj>

000004aa <_ZN3LED7walkingEv>:
}

void LED::walking()
{
  this->periodBlink(400, 1, 800);
 4aa:	20 e2       	ldi	r18, 0x20	; 32
 4ac:	33 e0       	ldi	r19, 0x03	; 3
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	60 e9       	ldi	r22, 0x90	; 144
 4b2:	71 e0       	ldi	r23, 0x01	; 1
 4b4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_ZN3LED11periodBlinkEjhj>

000004b8 <_ZN3LED7snoozedEv>:
}

void LED::snoozed()
{
  this->periodBlink(200, 2, 2500);
 4b8:	24 ec       	ldi	r18, 0xC4	; 196
 4ba:	39 e0       	ldi	r19, 0x09	; 9
 4bc:	42 e0       	ldi	r20, 0x02	; 2
 4be:	68 ec       	ldi	r22, 0xC8	; 200
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_ZN3LED11periodBlinkEjhj>

000004c6 <_ZN5MotorC1Eib>:
}

Motor::~Motor()
{
  digitalWrite(this->motorPin, LOW);
  pinMode(this->motorPin, INPUT);
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	ec 01       	movw	r28, r24
 4cc:	86 2f       	mov	r24, r22
 4ce:	68 83       	st	Y, r22
 4d0:	79 83       	std	Y+1, r23	; 0x01
 4d2:	4a 83       	std	Y+2, r20	; 0x02
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	0e 94 4c 05 	call	0xa98	; 0xa98 <pinMode>
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	88 81       	ld	r24, Y
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	0c 94 88 05 	jmp	0xb10	; 0xb10 <digitalWrite>

000004e6 <_ZN5Motor5startEv>:
}

void Motor::start()
{
  this->state = HIGH;
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	fc 01       	movw	r30, r24
 4ea:	22 83       	std	Z+2, r18	; 0x02
  digitalWrite(this->motorPin, HIGH);
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	80 81       	ld	r24, Z
 4f0:	0c 94 88 05 	jmp	0xb10	; 0xb10 <digitalWrite>

000004f4 <_ZN5Motor4stopEv>:
}

void Motor::stop()
{
  this->state = LOW;
 4f4:	fc 01       	movw	r30, r24
 4f6:	12 82       	std	Z+2, r1	; 0x02
  digitalWrite(this->motorPin, LOW);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <digitalWrite>

00000500 <_Z13hardwareSetupv>:
// Motor *motor;
// LED *led;

void hardwareSetup()
{
  pinMode(timePin, INPUT);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	84 e0       	ldi	r24, 0x04	; 4
 504:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <pinMode>

00000508 <_Z22is_preset_time_reachedv>:
	return main_button->isRiseEdge();
}

bool is_preset_time_reached()
{
	return workTimer->isOvertime();
 508:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <workTimer>
 50c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <workTimer+0x1>
 510:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN5Timer10isOvertimeEv>

00000514 <_Z23is_time_setting_changedv>:
}

bool is_time_setting_changed()
{
	return workTimer->isThresholdChanged(timePin);
 514:	64 e0       	ldi	r22, 0x04	; 4
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <workTimer>
 51c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <workTimer+0x1>
 520:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <_ZN5Timer18isThresholdChangedEi>

00000524 <_Z22is_walk_button_pressedv>:
}

bool is_walk_button_pressed()
{
	return main_button->isRiseEdge();
 524:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <main_button>
 528:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <main_button+0x1>
 52c:	0c 94 23 01 	jmp	0x246	; 0x246 <_ZN6Button10isRiseEdgeEv>

00000530 <_Z24is_snooze_button_pressedv>:
}

bool is_snooze_button_pressed()
{
	return snooze_button->isRiseEdge();
 530:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <snooze_button>
 534:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <snooze_button+0x1>
 538:	0c 94 23 01 	jmp	0x246	; 0x246 <_ZN6Button10isRiseEdgeEv>

0000053c <_Z21is_vibrating_overtimev>:
}

bool is_vibrating_overtime()
{
	return vibrateTimer->isOvertime();
 53c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <vibrateTimer>
 540:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <vibrateTimer+0x1>
 544:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN5Timer10isOvertimeEv>

00000548 <_Z23is_snoozed_time_reachedv>:
}

bool is_snoozed_time_reached()
{
	return snoozeTimer->isOvertime();
 548:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <snoozeTimer>
 54c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <snoozeTimer+0x1>
 550:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <_ZN5Timer10isOvertimeEv>

00000554 <setup>:
}

void setup()
{
 554:	ef 92       	push	r14
 556:	ff 92       	push	r15
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
	// Library Setup
	hardwareSetup();
 560:	0e 94 80 02 	call	0x500	; 0x500 <_Z13hardwareSetupv>
	Serial.begin(9600);
	Serial.println("Initialize Counter");
	#endif

	// State initialize
	state = IDLE;
 564:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state+0x1>
 568:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <state>

	workTimer = new Timer(worktime, 1000);
 56c:	8a e0       	ldi	r24, 0x0A	; 10
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 574:	ec 01       	movw	r28, r24
 576:	48 ee       	ldi	r20, 0xE8	; 232
 578:	53 e0       	ldi	r21, 0x03	; 3
 57a:	64 e1       	ldi	r22, 0x14	; 20
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5TimerC1Ejj>
 582:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <workTimer+0x1>
 586:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <workTimer>
	vibrateTimer = new Timer(vibratetime, 1000);
 58a:	8a e0       	ldi	r24, 0x0A	; 10
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 592:	ec 01       	movw	r28, r24
 594:	48 ee       	ldi	r20, 0xE8	; 232
 596:	53 e0       	ldi	r21, 0x03	; 3
 598:	6a e0       	ldi	r22, 0x0A	; 10
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5TimerC1Ejj>
 5a0:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <vibrateTimer+0x1>
 5a4:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <vibrateTimer>
	snoozeTimer = new Timer(snoozetime, 1000);
 5a8:	8a e0       	ldi	r24, 0x0A	; 10
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 5b0:	ec 01       	movw	r28, r24
 5b2:	48 ee       	ldi	r20, 0xE8	; 232
 5b4:	53 e0       	ldi	r21, 0x03	; 3
 5b6:	67 e0       	ldi	r22, 0x07	; 7
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	0e 94 01 04 	call	0x802	; 0x802 <_ZN5TimerC1Ejj>
 5be:	d0 93 11 01 	sts	0x0111, r29	; 0x800111 <snoozeTimer+0x1>
 5c2:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <snoozeTimer>

	main_button = new Button(main_button_pin, LOW, LOW);
 5c6:	87 e0       	ldi	r24, 0x07	; 7
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 5ce:	ec 01       	movw	r28, r24
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	62 e0       	ldi	r22, 0x02	; 2
 5d6:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN6ButtonC1Ehbb>
 5da:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <main_button+0x1>
 5de:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <main_button>
	snooze_button = new Button(snooze_button_pin, LOW, LOW);
 5e2:	87 e0       	ldi	r24, 0x07	; 7
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 5ea:	ec 01       	movw	r28, r24
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN6ButtonC1Ehbb>
 5f6:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <snooze_button+0x1>
 5fa:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <snooze_button>

	motor = new Motor(motorPin);
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 606:	ec 01       	movw	r28, r24
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	69 e0       	ldi	r22, 0x09	; 9
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <_ZN5MotorC1Eib>
 612:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <motor+0x1>
 616:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <motor>

	led = new LED(ledPin, LOW);
 61a:	8c e0       	ldi	r24, 0x0C	; 12
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 622:	ec 01       	movw	r28, r24
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	63 e1       	ldi	r22, 0x13	; 19
 628:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_ZN3LEDC1Ehb>
 62c:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <led+0x1>
 630:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <led>

	batteryMonitor = new BatteryMonitor(batteryEnablePin, batteryMonitorPin, batteryLEDPin, batteryMonitorPeriod);
 634:	80 e1       	ldi	r24, 0x10	; 16
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 93 04 	call	0x926	; 0x926 <_Znwj>
 63c:	ec 01       	movw	r28, r24
 63e:	18 ee       	ldi	r17, 0xE8	; 232
 640:	e1 2e       	mov	r14, r17
 642:	13 e0       	ldi	r17, 0x03	; 3
 644:	f1 2e       	mov	r15, r17
 646:	00 e0       	ldi	r16, 0x00	; 0
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	20 e1       	ldi	r18, 0x10	; 16
 64c:	41 e1       	ldi	r20, 0x11	; 17
 64e:	62 e1       	ldi	r22, 0x12	; 18
 650:	ce 01       	movw	r24, r28
 652:	0e 94 80 00 	call	0x100	; 0x100 <_ZN14BatteryMonitorC1Ehhhm>
 656:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <__data_end+0x1>
 65a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <__data_end>
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	08 95       	ret

0000066c <loop>:

void loop()
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
	switch (state)
 670:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <state>
 674:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <state+0x1>
 678:	c4 30       	cpi	r28, 0x04	; 4
 67a:	d1 05       	cpc	r29, r1
 67c:	09 f4       	brne	.+2      	; 0x680 <loop+0x14>
 67e:	67 c0       	rjmp	.+206    	; 0x74e <loop+0xe2>
 680:	34 f4       	brge	.+12     	; 0x68e <loop+0x22>
 682:	20 97       	sbiw	r28, 0x00	; 0
 684:	41 f1       	breq	.+80     	; 0x6d6 <loop+0x6a>
 686:	22 97       	sbiw	r28, 0x02	; 2
 688:	09 f4       	brne	.+2      	; 0x68c <loop+0x20>
 68a:	41 c0       	rjmp	.+130    	; 0x70e <loop+0xa2>
 68c:	b7 c0       	rjmp	.+366    	; 0x7fc <loop+0x190>
 68e:	c0 31       	cpi	r28, 0x10	; 16
 690:	d1 05       	cpc	r29, r1
 692:	09 f4       	brne	.+2      	; 0x696 <loop+0x2a>
 694:	86 c0       	rjmp	.+268    	; 0x7a2 <loop+0x136>
 696:	c0 32       	cpi	r28, 0x20	; 32
 698:	d1 05       	cpc	r29, r1
 69a:	09 f4       	brne	.+2      	; 0x69e <loop+0x32>
 69c:	97 c0       	rjmp	.+302    	; 0x7cc <loop+0x160>
 69e:	28 97       	sbiw	r28, 0x08	; 8
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <loop+0x38>
 6a2:	ac c0       	rjmp	.+344    	; 0x7fc <loop+0x190>
		break;
		case WALKING:
		#ifdef _DEBUG_
		Serial.println("WALKING");
		#endif
		led->walking();
 6a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 6a8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 6ac:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN3LED7walkingEv>
		motor->stop();
 6b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor>
 6b4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <motor+0x1>
 6b8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN5Motor4stopEv>
		workTimer->reset();
 6bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <workTimer>
 6c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <workTimer+0x1>
 6c4:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN5Timer5resetEv>
		vibrateTimer->reset();
 6c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <vibrateTimer>
 6cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <vibrateTimer+0x1>
 6d0:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN5Timer5resetEv>
 6d4:	61 c0       	rjmp	.+194    	; 0x798 <loop+0x12c>
	{
		case IDLE:
		#ifdef _DEBUG_
		Serial.println("IDLE");
		#endif
		led->powerOn();
 6d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 6da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 6de:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN3LED7powerOnEv>
		workTimer->readTimeSetting(timePin);
 6e2:	64 e0       	ldi	r22, 0x04	; 4
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <workTimer>
 6ea:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <workTimer+0x1>
 6ee:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Timer15readTimeSettingEi>
		batteryMonitor->checkBatteryStatus();
 6f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 6f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 6fa:	0e 94 c2 00 	call	0x184	; 0x184 <_ZN14BatteryMonitor18checkBatteryStatusEv>
		if (is_start_button_pressed())
 6fe:	0e 94 92 02 	call	0x524	; 0x524 <_Z22is_walk_button_pressedv>
 702:	88 23       	and	r24, r24
 704:	09 f4       	brne	.+2      	; 0x708 <loop+0x9c>
 706:	7a c0       	rjmp	.+244    	; 0x7fc <loop+0x190>
		{
			state = TIME_RUNNING;
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	16 c0       	rjmp	.+44     	; 0x73a <loop+0xce>
		Serial.print("    Timer/Threshold: ");
		Serial.print(workTimer->getTimer());
		Serial.print("/");
		Serial.println(workTimer->getThreshold());
		#endif
		led->timerRunning();
 70e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 712:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 716:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN3LED12timerRunningEv>
		workTimer->run();
 71a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <workTimer>
 71e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <workTimer+0x1>
 722:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Timer3runEv>
		if (is_pause_button_pressed())
 726:	0e 94 92 02 	call	0x524	; 0x524 <_Z22is_walk_button_pressedv>
 72a:	81 11       	cpse	r24, r1
 72c:	35 c0       	rjmp	.+106    	; 0x798 <loop+0x12c>
		{
			state = IDLE;
		}
		else if (is_preset_time_reached())
 72e:	0e 94 84 02 	call	0x508	; 0x508 <_Z22is_preset_time_reachedv>
 732:	88 23       	and	r24, r24
 734:	39 f0       	breq	.+14     	; 0x744 <loop+0xd8>
		{
			state = VIBRATING;
 736:	84 e0       	ldi	r24, 0x04	; 4
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <state+0x1>
 73e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 742:	5c c0       	rjmp	.+184    	; 0x7fc <loop+0x190>
		}
		else if (is_time_setting_changed())
 744:	0e 94 8a 02 	call	0x514	; 0x514 <_Z23is_time_setting_changedv>
 748:	81 11       	cpse	r24, r1
 74a:	26 c0       	rjmp	.+76     	; 0x798 <loop+0x12c>
 74c:	dd cf       	rjmp	.-70     	; 0x708 <loop+0x9c>
		Serial.print("    Timer/Threshold: ");
		Serial.print(vibrateTimer->getTimer());
		Serial.print("/");
		Serial.println(vibrateTimer->getThreshold());
		#endif
		led->powerOff();
 74e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 752:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 756:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN3LED8powerOffEv>
		motor->start();
 75a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor>
 75e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <motor+0x1>
 762:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_ZN5Motor5startEv>
		vibrateTimer->run();
 766:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <vibrateTimer>
 76a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <vibrateTimer+0x1>
 76e:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Timer3runEv>
		if (is_walk_button_pressed())
 772:	0e 94 92 02 	call	0x524	; 0x524 <_Z22is_walk_button_pressedv>
 776:	88 23       	and	r24, r24
 778:	19 f0       	breq	.+6      	; 0x780 <loop+0x114>
		{
			state = WALKING;
 77a:	88 e0       	ldi	r24, 0x08	; 8
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	dd cf       	rjmp	.-70     	; 0x73a <loop+0xce>
		}
		else if (is_snooze_button_pressed())
 780:	0e 94 98 02 	call	0x530	; 0x530 <_Z24is_snooze_button_pressedv>
 784:	88 23       	and	r24, r24
 786:	19 f0       	breq	.+6      	; 0x78e <loop+0x122>
		{
			state = SNOOZING;
 788:	80 e1       	ldi	r24, 0x10	; 16
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	d6 cf       	rjmp	.-84     	; 0x73a <loop+0xce>
		}
		else if (is_vibrating_overtime())
 78e:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z21is_vibrating_overtimev>
 792:	81 11       	cpse	r24, r1
 794:	f2 cf       	rjmp	.-28     	; 0x77a <loop+0x10e>
 796:	cf cf       	rjmp	.-98     	; 0x736 <loop+0xca>
		#endif
		led->walking();
		motor->stop();
		workTimer->reset();
		vibrateTimer->reset();
		state = IDLE;
 798:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <state+0x1>
 79c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <state>
		break;
 7a0:	2d c0       	rjmp	.+90     	; 0x7fc <loop+0x190>
		case SNOOZING:
		#ifdef _DEBUG_
		Serial.println("SNOOZING");
		#endif
		motor->stop();
 7a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <motor>
 7a6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <motor+0x1>
 7aa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_ZN5Motor4stopEv>
		snoozeTimer->reset();
 7ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <snoozeTimer>
 7b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <snoozeTimer+0x1>
 7b6:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN5Timer5resetEv>
		vibrateTimer->reset();
 7ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <vibrateTimer>
 7be:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <vibrateTimer+0x1>
 7c2:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN5Timer5resetEv>
		state = SNOOZED;
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	b7 cf       	rjmp	.-146    	; 0x73a <loop+0xce>
		Serial.print("    Timer/Threshold: ");
		Serial.print(snoozeTimer->getTimer());
		Serial.print("/");
		Serial.println(snoozeTimer->getThreshold());
		#endif
		led->snoozed();
 7cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <led>
 7d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <led+0x1>
 7d4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN3LED7snoozedEv>
		snoozeTimer->run();
 7d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <snoozeTimer>
 7dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <snoozeTimer+0x1>
 7e0:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Timer3runEv>
		if (is_snoozed_time_reached())
 7e4:	0e 94 a4 02 	call	0x548	; 0x548 <_Z23is_snoozed_time_reachedv>
 7e8:	81 11       	cpse	r24, r1
 7ea:	a5 cf       	rjmp	.-182    	; 0x736 <loop+0xca>
		{
			state = VIBRATING;
		}
		else if (is_walk_button_pressed())
 7ec:	0e 94 92 02 	call	0x524	; 0x524 <_Z22is_walk_button_pressedv>
 7f0:	81 11       	cpse	r24, r1
 7f2:	c3 cf       	rjmp	.-122    	; 0x77a <loop+0x10e>
		{
			state = WALKING;
		}
		else
		{
			state = SNOOZED;
 7f4:	d0 93 17 01 	sts	0x0117, r29	; 0x800117 <state+0x1>
 7f8:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <state>
		}
		break;
	}
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	08 95       	ret

00000802 <_ZN5TimerC1Ejj>:
  return this->threshold;
}

void Timer::setThreshold(unsigned int threshold)
{
  this->threshold = threshold;
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	ec 01       	movw	r28, r24
 808:	19 82       	std	Y+1, r1	; 0x01
 80a:	18 82       	st	Y, r1
 80c:	7b 83       	std	Y+3, r23	; 0x03
 80e:	6a 83       	std	Y+2, r22	; 0x02
 810:	5d 83       	std	Y+5, r21	; 0x05
 812:	4c 83       	std	Y+4, r20	; 0x04
 814:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
 818:	6e 83       	std	Y+6, r22	; 0x06
 81a:	7f 83       	std	Y+7, r23	; 0x07
 81c:	88 87       	std	Y+8, r24	; 0x08
 81e:	99 87       	std	Y+9, r25	; 0x09
 820:	df 91       	pop	r29
 822:	cf 91       	pop	r28
 824:	08 95       	ret

00000826 <_ZN5Timer3runEv>:
}

void Timer::run()
{
 826:	cf 92       	push	r12
 828:	df 92       	push	r13
 82a:	ef 92       	push	r14
 82c:	ff 92       	push	r15
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
 836:	ec 01       	movw	r28, r24
  unsigned long curtTime = millis();
 838:	0e 94 df 04 	call	0x9be	; 0x9be <millis>
  if (curtTime - this->prevTime >= this->step)
 83c:	0e 81       	ldd	r16, Y+6	; 0x06
 83e:	1f 81       	ldd	r17, Y+7	; 0x07
 840:	28 85       	ldd	r18, Y+8	; 0x08
 842:	39 85       	ldd	r19, Y+9	; 0x09
 844:	6b 01       	movw	r12, r22
 846:	7c 01       	movw	r14, r24
 848:	c0 1a       	sub	r12, r16
 84a:	d1 0a       	sbc	r13, r17
 84c:	e2 0a       	sbc	r14, r18
 84e:	f3 0a       	sbc	r15, r19
 850:	97 01       	movw	r18, r14
 852:	86 01       	movw	r16, r12
 854:	4c 81       	ldd	r20, Y+4	; 0x04
 856:	5d 81       	ldd	r21, Y+5	; 0x05
 858:	6a 01       	movw	r12, r20
 85a:	e1 2c       	mov	r14, r1
 85c:	f1 2c       	mov	r15, r1
 85e:	0c 15       	cp	r16, r12
 860:	1d 05       	cpc	r17, r13
 862:	2e 05       	cpc	r18, r14
 864:	3f 05       	cpc	r19, r15
 866:	50 f0       	brcs	.+20     	; 0x87c <_ZN5Timer3runEv+0x56>
  {
    this->timer++;
 868:	28 81       	ld	r18, Y
 86a:	39 81       	ldd	r19, Y+1	; 0x01
 86c:	2f 5f       	subi	r18, 0xFF	; 255
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	39 83       	std	Y+1, r19	; 0x01
 872:	28 83       	st	Y, r18
    this->prevTime = curtTime;
 874:	6e 83       	std	Y+6, r22	; 0x06
 876:	7f 83       	std	Y+7, r23	; 0x07
 878:	88 87       	std	Y+8, r24	; 0x08
 87a:	99 87       	std	Y+9, r25	; 0x09
  }
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	df 90       	pop	r13
 88a:	cf 90       	pop	r12
 88c:	08 95       	ret

0000088e <_ZN5Timer5resetEv>:
  return this->timer;
}

void Timer::setTimer(unsigned int timer)
{
  this->timer = timer;
 88e:	fc 01       	movw	r30, r24
 890:	11 82       	std	Z+1, r1	; 0x01
 892:	10 82       	st	Z, r1
 894:	08 95       	ret

00000896 <_ZN5Timer15readTimeSettingEi>:
{
  this->setTimer(0);
}

void Timer::readTimeSetting(int timePin)
{
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	ec 01       	movw	r28, r24
 89c:	86 2f       	mov	r24, r22
  bool timePinState = digitalRead(timePin);
 89e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <digitalRead>
  if (timePinState == HIGH)
 8a2:	89 2b       	or	r24, r25
 8a4:	19 f0       	breq	.+6      	; 0x8ac <_ZN5Timer15readTimeSettingEi+0x16>
  return this->threshold;
}

void Timer::setThreshold(unsigned int threshold)
{
  this->threshold = threshold;
 8a6:	84 e1       	ldi	r24, 0x14	; 20
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <_ZN5Timer15readTimeSettingEi+0x1a>
 8ac:	8f e0       	ldi	r24, 0x0F	; 15
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	9b 83       	std	Y+3, r25	; 0x03
 8b2:	8a 83       	std	Y+2, r24	; 0x02
  }
  else
  {
    this->setThreshold(WORKINGTIME2);
  }
}
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <_ZN5Timer10isOvertimeEv>:

bool Timer::isOvertime()
{
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	ec 01       	movw	r28, r24
  this->run();
 8c0:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Timer3runEv>
  return this->getTimer() >= this->getThreshold();
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	48 81       	ld	r20, Y
 8c8:	59 81       	ldd	r21, Y+1	; 0x01
 8ca:	2a 81       	ldd	r18, Y+2	; 0x02
 8cc:	3b 81       	ldd	r19, Y+3	; 0x03
 8ce:	42 17       	cp	r20, r18
 8d0:	53 07       	cpc	r21, r19
 8d2:	08 f4       	brcc	.+2      	; 0x8d6 <_ZN5Timer10isOvertimeEv+0x1c>
 8d4:	80 e0       	ldi	r24, 0x00	; 0
}
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <_ZN5Timer18isThresholdChangedEi>:

bool Timer::isThresholdChanged(int timePin)
{
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	ec 01       	movw	r28, r24
  this->timer = timer;
}

unsigned int Timer::getThreshold()
{
  return this->threshold;
 8e6:	0a 81       	ldd	r16, Y+2	; 0x02
 8e8:	1b 81       	ldd	r17, Y+3	; 0x03
}

bool Timer::isThresholdChanged(int timePin)
{
  unsigned int old = this->getThreshold();
  this->readTimeSetting(timePin);
 8ea:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Timer15readTimeSettingEi>
  return old != this->getThreshold();
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	2a 81       	ldd	r18, Y+2	; 0x02
 8f2:	3b 81       	ldd	r19, Y+3	; 0x03
 8f4:	20 17       	cp	r18, r16
 8f6:	31 07       	cpc	r19, r17
 8f8:	09 f4       	brne	.+2      	; 0x8fc <_ZN5Timer18isThresholdChangedEi+0x20>
 8fa:	80 e0       	ldi	r24, 0x00	; 0
}
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	0f 91       	pop	r16
 904:	08 95       	ret

00000906 <initVariant>:
 906:	08 95       	ret

00000908 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 908:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <init>

	initVariant();
 90c:	0e 94 83 04 	call	0x906	; 0x906 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 910:	0e 94 aa 02 	call	0x554	; 0x554 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 914:	c0 e0       	ldi	r28, 0x00	; 0
 916:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 918:	0e 94 36 03 	call	0x66c	; 0x66c <loop>
		if (serialEventRun) serialEventRun();
 91c:	20 97       	sbiw	r28, 0x00	; 0
 91e:	e1 f3       	breq	.-8      	; 0x918 <main+0x10>
 920:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 924:	f9 cf       	rjmp	.-14     	; 0x918 <main+0x10>

00000926 <_Znwj>:
 926:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <malloc>

0000092a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <timer0_millis>
 944:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <timer0_millis+0x1>
 948:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <timer0_millis+0x2>
 94c:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <timer0_millis+0x3>
 950:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <timer0_fract>
 954:	20 e3       	ldi	r18, 0x30	; 48
 956:	23 0f       	add	r18, r19
 958:	2d 37       	cpi	r18, 0x7D	; 125
 95a:	20 f4       	brcc	.+8      	; 0x964 <__vector_16+0x3a>
 95c:	40 96       	adiw	r24, 0x10	; 16
 95e:	a1 1d       	adc	r26, r1
 960:	b1 1d       	adc	r27, r1
 962:	05 c0       	rjmp	.+10     	; 0x96e <__vector_16+0x44>
 964:	23 eb       	ldi	r18, 0xB3	; 179
 966:	23 0f       	add	r18, r19
 968:	41 96       	adiw	r24, 0x11	; 17
 96a:	a1 1d       	adc	r26, r1
 96c:	b1 1d       	adc	r27, r1
 96e:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <timer0_fract>
 972:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer0_millis>
 976:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <timer0_millis+0x1>
 97a:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <timer0_millis+0x2>
 97e:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <timer0_millis+0x3>
 982:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer0_overflow_count>
 986:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer0_overflow_count+0x1>
 98a:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <timer0_overflow_count+0x2>
 98e:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <timer0_overflow_count+0x3>
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	a1 1d       	adc	r26, r1
 996:	b1 1d       	adc	r27, r1
 998:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <timer0_overflow_count>
 99c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <timer0_overflow_count+0x1>
 9a0:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <timer0_overflow_count+0x2>
 9a4:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <timer0_overflow_count+0x3>
 9a8:	bf 91       	pop	r27
 9aa:	af 91       	pop	r26
 9ac:	9f 91       	pop	r25
 9ae:	8f 91       	pop	r24
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <millis>:
 9be:	2f b7       	in	r18, 0x3f	; 63
 9c0:	f8 94       	cli
 9c2:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <timer0_millis>
 9c6:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <timer0_millis+0x1>
 9ca:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_millis+0x2>
 9ce:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_millis+0x3>
 9d2:	2f bf       	out	0x3f, r18	; 63
 9d4:	08 95       	ret

000009d6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9d6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9d8:	84 b5       	in	r24, 0x24	; 36
 9da:	82 60       	ori	r24, 0x02	; 2
 9dc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9de:	84 b5       	in	r24, 0x24	; 36
 9e0:	81 60       	ori	r24, 0x01	; 1
 9e2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9e4:	85 b5       	in	r24, 0x25	; 37
 9e6:	82 60       	ori	r24, 0x02	; 2
 9e8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9ea:	85 b5       	in	r24, 0x25	; 37
 9ec:	81 60       	ori	r24, 0x01	; 1
 9ee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9f0:	ee e6       	ldi	r30, 0x6E	; 110
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9fa:	e1 e8       	ldi	r30, 0x81	; 129
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a00:	80 81       	ld	r24, Z
 a02:	82 60       	ori	r24, 0x02	; 2
 a04:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 a06:	e0 e8       	ldi	r30, 0x80	; 128
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	80 81       	ld	r24, Z
 a0c:	81 60       	ori	r24, 0x01	; 1
 a0e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 a10:	e1 eb       	ldi	r30, 0xB1	; 177
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	84 60       	ori	r24, 0x04	; 4
 a18:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a1a:	e0 eb       	ldi	r30, 0xB0	; 176
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 81       	ld	r24, Z
 a20:	81 60       	ori	r24, 0x01	; 1
 a22:	80 83       	st	Z, r24
	#elif F_CPU >= 2000000 // 2 MHz / 16 = 125 KHz
		sbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		cbi(ADCSRA, ADPS0);
	#elif F_CPU >= 1000000 // 1 MHz / 8 = 125 KHz
		cbi(ADCSRA, ADPS2);
 a24:	ea e7       	ldi	r30, 0x7A	; 122
 a26:	f0 e0       	ldi	r31, 0x00	; 0
 a28:	80 81       	ld	r24, Z
 a2a:	8b 7f       	andi	r24, 0xFB	; 251
 a2c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a2e:	80 81       	ld	r24, Z
 a30:	82 60       	ori	r24, 0x02	; 2
 a32:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a34:	80 81       	ld	r24, Z
 a36:	81 60       	ori	r24, 0x01	; 1
 a38:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a3a:	80 81       	ld	r24, Z
 a3c:	80 68       	ori	r24, 0x80	; 128
 a3e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a40:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a44:	08 95       	ret

00000a46 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a46:	83 30       	cpi	r24, 0x03	; 3
 a48:	81 f0       	breq	.+32     	; 0xa6a <turnOffPWM+0x24>
 a4a:	28 f4       	brcc	.+10     	; 0xa56 <turnOffPWM+0x10>
 a4c:	81 30       	cpi	r24, 0x01	; 1
 a4e:	99 f0       	breq	.+38     	; 0xa76 <turnOffPWM+0x30>
 a50:	82 30       	cpi	r24, 0x02	; 2
 a52:	a1 f0       	breq	.+40     	; 0xa7c <turnOffPWM+0x36>
 a54:	08 95       	ret
 a56:	87 30       	cpi	r24, 0x07	; 7
 a58:	a9 f0       	breq	.+42     	; 0xa84 <turnOffPWM+0x3e>
 a5a:	88 30       	cpi	r24, 0x08	; 8
 a5c:	b9 f0       	breq	.+46     	; 0xa8c <turnOffPWM+0x46>
 a5e:	84 30       	cpi	r24, 0x04	; 4
 a60:	d1 f4       	brne	.+52     	; 0xa96 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a66:	8f 7d       	andi	r24, 0xDF	; 223
 a68:	03 c0       	rjmp	.+6      	; 0xa70 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a6e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a74:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a76:	84 b5       	in	r24, 0x24	; 36
 a78:	8f 77       	andi	r24, 0x7F	; 127
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a7c:	84 b5       	in	r24, 0x24	; 36
 a7e:	8f 7d       	andi	r24, 0xDF	; 223
 a80:	84 bd       	out	0x24, r24	; 36
 a82:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a84:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a88:	8f 77       	andi	r24, 0x7F	; 127
 a8a:	03 c0       	rjmp	.+6      	; 0xa92 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a90:	8f 7d       	andi	r24, 0xDF	; 223
 a92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a96:	08 95       	ret

00000a98 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	fc 01       	movw	r30, r24
 aa0:	e4 58       	subi	r30, 0x84	; 132
 aa2:	ff 4f       	sbci	r31, 0xFF	; 255
 aa4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 aa6:	fc 01       	movw	r30, r24
 aa8:	e0 57       	subi	r30, 0x70	; 112
 aaa:	ff 4f       	sbci	r31, 0xFF	; 255
 aac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 aae:	88 23       	and	r24, r24
 ab0:	61 f1       	breq	.+88     	; 0xb0a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	fc 01       	movw	r30, r24
 aba:	e8 54       	subi	r30, 0x48	; 72
 abc:	ff 4f       	sbci	r31, 0xFF	; 255
 abe:	c5 91       	lpm	r28, Z+
 ac0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 ac2:	fc 01       	movw	r30, r24
 ac4:	e2 55       	subi	r30, 0x52	; 82
 ac6:	ff 4f       	sbci	r31, 0xFF	; 255
 ac8:	a5 91       	lpm	r26, Z+
 aca:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 acc:	61 11       	cpse	r22, r1
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ad0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ad2:	f8 94       	cli
		*reg &= ~bit;
 ad4:	88 81       	ld	r24, Y
 ad6:	20 95       	com	r18
 ad8:	82 23       	and	r24, r18
 ada:	88 83       	st	Y, r24
		*out &= ~bit;
 adc:	ec 91       	ld	r30, X
 ade:	2e 23       	and	r18, r30
 ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 ae2:	62 30       	cpi	r22, 0x02	; 2
 ae4:	61 f4       	brne	.+24     	; 0xafe <pinMode+0x66>
		uint8_t oldSREG = SREG;
 ae6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ae8:	f8 94       	cli
		*reg &= ~bit;
 aea:	88 81       	ld	r24, Y
 aec:	32 2f       	mov	r19, r18
 aee:	30 95       	com	r19
 af0:	83 23       	and	r24, r19
 af2:	88 83       	st	Y, r24
		*out |= bit;
 af4:	ec 91       	ld	r30, X
 af6:	2e 2b       	or	r18, r30
 af8:	2c 93       	st	X, r18
		SREG = oldSREG;
 afa:	9f bf       	out	0x3f, r25	; 63
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 afe:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b00:	f8 94       	cli
		*reg |= bit;
 b02:	e8 81       	ld	r30, Y
 b04:	2e 2b       	or	r18, r30
 b06:	28 83       	st	Y, r18
		SREG = oldSREG;
 b08:	8f bf       	out	0x3f, r24	; 63
	}
}
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	08 95       	ret

00000b10 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b16:	28 2f       	mov	r18, r24
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	f9 01       	movw	r30, r18
 b1c:	e8 59       	subi	r30, 0x98	; 152
 b1e:	ff 4f       	sbci	r31, 0xFF	; 255
 b20:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b22:	f9 01       	movw	r30, r18
 b24:	e4 58       	subi	r30, 0x84	; 132
 b26:	ff 4f       	sbci	r31, 0xFF	; 255
 b28:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b2a:	f9 01       	movw	r30, r18
 b2c:	e0 57       	subi	r30, 0x70	; 112
 b2e:	ff 4f       	sbci	r31, 0xFF	; 255
 b30:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b32:	cc 23       	and	r28, r28
 b34:	c1 f0       	breq	.+48     	; 0xb66 <digitalWrite+0x56>
 b36:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b38:	81 11       	cpse	r24, r1
 b3a:	0e 94 23 05 	call	0xa46	; 0xa46 <turnOffPWM>

	out = portOutputRegister(port);
 b3e:	ec 2f       	mov	r30, r28
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	ee 0f       	add	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	e2 55       	subi	r30, 0x52	; 82
 b48:	ff 4f       	sbci	r31, 0xFF	; 255
 b4a:	a5 91       	lpm	r26, Z+
 b4c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b4e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b50:	f8 94       	cli

	if (val == LOW) {
 b52:	11 11       	cpse	r17, r1
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <digitalWrite+0x4e>
		*out &= ~bit;
 b56:	8c 91       	ld	r24, X
 b58:	d0 95       	com	r29
 b5a:	d8 23       	and	r29, r24
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <digitalWrite+0x52>
	} else {
		*out |= bit;
 b5e:	ec 91       	ld	r30, X
 b60:	de 2b       	or	r29, r30
 b62:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b64:	9f bf       	out	0x3f, r25	; 63
}
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17
 b6c:	08 95       	ret

00000b6e <digitalRead>:

int digitalRead(uint8_t pin)
{
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b72:	28 2f       	mov	r18, r24
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	f9 01       	movw	r30, r18
 b78:	e8 59       	subi	r30, 0x98	; 152
 b7a:	ff 4f       	sbci	r31, 0xFF	; 255
 b7c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b7e:	f9 01       	movw	r30, r18
 b80:	e4 58       	subi	r30, 0x84	; 132
 b82:	ff 4f       	sbci	r31, 0xFF	; 255
 b84:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b86:	f9 01       	movw	r30, r18
 b88:	e0 57       	subi	r30, 0x70	; 112
 b8a:	ff 4f       	sbci	r31, 0xFF	; 255
 b8c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 b8e:	cc 23       	and	r28, r28
 b90:	91 f0       	breq	.+36     	; 0xbb6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b92:	81 11       	cpse	r24, r1
 b94:	0e 94 23 05 	call	0xa46	; 0xa46 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b98:	ec 2f       	mov	r30, r28
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	ee 0f       	add	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	ec 55       	subi	r30, 0x5C	; 92
 ba2:	ff 4f       	sbci	r31, 0xFF	; 255
 ba4:	a5 91       	lpm	r26, Z+
 ba6:	b4 91       	lpm	r27, Z
 ba8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 baa:	ed 23       	and	r30, r29
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	21 f4       	brne	.+8      	; 0xbba <digitalRead+0x4c>
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <digitalRead+0x4c>
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	08 95       	ret

00000bc0 <malloc>:
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	82 30       	cpi	r24, 0x02	; 2
 bca:	91 05       	cpc	r25, r1
 bcc:	10 f4       	brcc	.+4      	; 0xbd2 <malloc+0x12>
 bce:	82 e0       	ldi	r24, 0x02	; 2
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <__flp>
 bd6:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <__flp+0x1>
 bda:	20 e0       	ldi	r18, 0x00	; 0
 bdc:	30 e0       	ldi	r19, 0x00	; 0
 bde:	a0 e0       	ldi	r26, 0x00	; 0
 be0:	b0 e0       	ldi	r27, 0x00	; 0
 be2:	30 97       	sbiw	r30, 0x00	; 0
 be4:	19 f1       	breq	.+70     	; 0xc2c <malloc+0x6c>
 be6:	40 81       	ld	r20, Z
 be8:	51 81       	ldd	r21, Z+1	; 0x01
 bea:	02 81       	ldd	r16, Z+2	; 0x02
 bec:	13 81       	ldd	r17, Z+3	; 0x03
 bee:	48 17       	cp	r20, r24
 bf0:	59 07       	cpc	r21, r25
 bf2:	c8 f0       	brcs	.+50     	; 0xc26 <malloc+0x66>
 bf4:	84 17       	cp	r24, r20
 bf6:	95 07       	cpc	r25, r21
 bf8:	69 f4       	brne	.+26     	; 0xc14 <malloc+0x54>
 bfa:	10 97       	sbiw	r26, 0x00	; 0
 bfc:	31 f0       	breq	.+12     	; 0xc0a <malloc+0x4a>
 bfe:	12 96       	adiw	r26, 0x02	; 2
 c00:	0c 93       	st	X, r16
 c02:	12 97       	sbiw	r26, 0x02	; 2
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	1c 93       	st	X, r17
 c08:	27 c0       	rjmp	.+78     	; 0xc58 <malloc+0x98>
 c0a:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <__flp>
 c0e:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <__flp+0x1>
 c12:	22 c0       	rjmp	.+68     	; 0xc58 <malloc+0x98>
 c14:	21 15       	cp	r18, r1
 c16:	31 05       	cpc	r19, r1
 c18:	19 f0       	breq	.+6      	; 0xc20 <malloc+0x60>
 c1a:	42 17       	cp	r20, r18
 c1c:	53 07       	cpc	r21, r19
 c1e:	18 f4       	brcc	.+6      	; 0xc26 <malloc+0x66>
 c20:	9a 01       	movw	r18, r20
 c22:	bd 01       	movw	r22, r26
 c24:	ef 01       	movw	r28, r30
 c26:	df 01       	movw	r26, r30
 c28:	f8 01       	movw	r30, r16
 c2a:	db cf       	rjmp	.-74     	; 0xbe2 <malloc+0x22>
 c2c:	21 15       	cp	r18, r1
 c2e:	31 05       	cpc	r19, r1
 c30:	f9 f0       	breq	.+62     	; 0xc70 <malloc+0xb0>
 c32:	28 1b       	sub	r18, r24
 c34:	39 0b       	sbc	r19, r25
 c36:	24 30       	cpi	r18, 0x04	; 4
 c38:	31 05       	cpc	r19, r1
 c3a:	80 f4       	brcc	.+32     	; 0xc5c <malloc+0x9c>
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	9b 81       	ldd	r25, Y+3	; 0x03
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
 c44:	21 f0       	breq	.+8      	; 0xc4e <malloc+0x8e>
 c46:	fb 01       	movw	r30, r22
 c48:	93 83       	std	Z+3, r25	; 0x03
 c4a:	82 83       	std	Z+2, r24	; 0x02
 c4c:	04 c0       	rjmp	.+8      	; 0xc56 <malloc+0x96>
 c4e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__flp+0x1>
 c52:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__flp>
 c56:	fe 01       	movw	r30, r28
 c58:	32 96       	adiw	r30, 0x02	; 2
 c5a:	44 c0       	rjmp	.+136    	; 0xce4 <malloc+0x124>
 c5c:	fe 01       	movw	r30, r28
 c5e:	e2 0f       	add	r30, r18
 c60:	f3 1f       	adc	r31, r19
 c62:	81 93       	st	Z+, r24
 c64:	91 93       	st	Z+, r25
 c66:	22 50       	subi	r18, 0x02	; 2
 c68:	31 09       	sbc	r19, r1
 c6a:	39 83       	std	Y+1, r19	; 0x01
 c6c:	28 83       	st	Y, r18
 c6e:	3a c0       	rjmp	.+116    	; 0xce4 <malloc+0x124>
 c70:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 c74:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 c78:	23 2b       	or	r18, r19
 c7a:	41 f4       	brne	.+16     	; 0xc8c <malloc+0xcc>
 c7c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c80:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c84:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <__brkval+0x1>
 c88:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__brkval>
 c8c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c90:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c94:	21 15       	cp	r18, r1
 c96:	31 05       	cpc	r19, r1
 c98:	41 f4       	brne	.+16     	; 0xcaa <malloc+0xea>
 c9a:	2d b7       	in	r18, 0x3d	; 61
 c9c:	3e b7       	in	r19, 0x3e	; 62
 c9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ca2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ca6:	24 1b       	sub	r18, r20
 ca8:	35 0b       	sbc	r19, r21
 caa:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <__brkval>
 cae:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <__brkval+0x1>
 cb2:	e2 17       	cp	r30, r18
 cb4:	f3 07       	cpc	r31, r19
 cb6:	a0 f4       	brcc	.+40     	; 0xce0 <malloc+0x120>
 cb8:	2e 1b       	sub	r18, r30
 cba:	3f 0b       	sbc	r19, r31
 cbc:	28 17       	cp	r18, r24
 cbe:	39 07       	cpc	r19, r25
 cc0:	78 f0       	brcs	.+30     	; 0xce0 <malloc+0x120>
 cc2:	ac 01       	movw	r20, r24
 cc4:	4e 5f       	subi	r20, 0xFE	; 254
 cc6:	5f 4f       	sbci	r21, 0xFF	; 255
 cc8:	24 17       	cp	r18, r20
 cca:	35 07       	cpc	r19, r21
 ccc:	48 f0       	brcs	.+18     	; 0xce0 <malloc+0x120>
 cce:	4e 0f       	add	r20, r30
 cd0:	5f 1f       	adc	r21, r31
 cd2:	50 93 22 01 	sts	0x0122, r21	; 0x800122 <__brkval+0x1>
 cd6:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <__brkval>
 cda:	81 93       	st	Z+, r24
 cdc:	91 93       	st	Z+, r25
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <malloc+0x124>
 ce0:	e0 e0       	ldi	r30, 0x00	; 0
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	cf 01       	movw	r24, r30
 ce6:	df 91       	pop	r29
 ce8:	cf 91       	pop	r28
 cea:	1f 91       	pop	r17
 cec:	0f 91       	pop	r16
 cee:	08 95       	ret

00000cf0 <free>:
 cf0:	cf 93       	push	r28
 cf2:	df 93       	push	r29
 cf4:	00 97       	sbiw	r24, 0x00	; 0
 cf6:	09 f4       	brne	.+2      	; 0xcfa <free+0xa>
 cf8:	81 c0       	rjmp	.+258    	; 0xdfc <free+0x10c>
 cfa:	fc 01       	movw	r30, r24
 cfc:	32 97       	sbiw	r30, 0x02	; 2
 cfe:	13 82       	std	Z+3, r1	; 0x03
 d00:	12 82       	std	Z+2, r1	; 0x02
 d02:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <__flp>
 d06:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <__flp+0x1>
 d0a:	10 97       	sbiw	r26, 0x00	; 0
 d0c:	81 f4       	brne	.+32     	; 0xd2e <free+0x3e>
 d0e:	20 81       	ld	r18, Z
 d10:	31 81       	ldd	r19, Z+1	; 0x01
 d12:	82 0f       	add	r24, r18
 d14:	93 1f       	adc	r25, r19
 d16:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 d1a:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 d1e:	28 17       	cp	r18, r24
 d20:	39 07       	cpc	r19, r25
 d22:	51 f5       	brne	.+84     	; 0xd78 <free+0x88>
 d24:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <__brkval+0x1>
 d28:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <__brkval>
 d2c:	67 c0       	rjmp	.+206    	; 0xdfc <free+0x10c>
 d2e:	ed 01       	movw	r28, r26
 d30:	20 e0       	ldi	r18, 0x00	; 0
 d32:	30 e0       	ldi	r19, 0x00	; 0
 d34:	ce 17       	cp	r28, r30
 d36:	df 07       	cpc	r29, r31
 d38:	40 f4       	brcc	.+16     	; 0xd4a <free+0x5a>
 d3a:	4a 81       	ldd	r20, Y+2	; 0x02
 d3c:	5b 81       	ldd	r21, Y+3	; 0x03
 d3e:	9e 01       	movw	r18, r28
 d40:	41 15       	cp	r20, r1
 d42:	51 05       	cpc	r21, r1
 d44:	f1 f0       	breq	.+60     	; 0xd82 <free+0x92>
 d46:	ea 01       	movw	r28, r20
 d48:	f5 cf       	rjmp	.-22     	; 0xd34 <free+0x44>
 d4a:	d3 83       	std	Z+3, r29	; 0x03
 d4c:	c2 83       	std	Z+2, r28	; 0x02
 d4e:	40 81       	ld	r20, Z
 d50:	51 81       	ldd	r21, Z+1	; 0x01
 d52:	84 0f       	add	r24, r20
 d54:	95 1f       	adc	r25, r21
 d56:	c8 17       	cp	r28, r24
 d58:	d9 07       	cpc	r29, r25
 d5a:	59 f4       	brne	.+22     	; 0xd72 <free+0x82>
 d5c:	88 81       	ld	r24, Y
 d5e:	99 81       	ldd	r25, Y+1	; 0x01
 d60:	84 0f       	add	r24, r20
 d62:	95 1f       	adc	r25, r21
 d64:	02 96       	adiw	r24, 0x02	; 2
 d66:	91 83       	std	Z+1, r25	; 0x01
 d68:	80 83       	st	Z, r24
 d6a:	8a 81       	ldd	r24, Y+2	; 0x02
 d6c:	9b 81       	ldd	r25, Y+3	; 0x03
 d6e:	93 83       	std	Z+3, r25	; 0x03
 d70:	82 83       	std	Z+2, r24	; 0x02
 d72:	21 15       	cp	r18, r1
 d74:	31 05       	cpc	r19, r1
 d76:	29 f4       	brne	.+10     	; 0xd82 <free+0x92>
 d78:	f0 93 24 01 	sts	0x0124, r31	; 0x800124 <__flp+0x1>
 d7c:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <__flp>
 d80:	3d c0       	rjmp	.+122    	; 0xdfc <free+0x10c>
 d82:	e9 01       	movw	r28, r18
 d84:	fb 83       	std	Y+3, r31	; 0x03
 d86:	ea 83       	std	Y+2, r30	; 0x02
 d88:	49 91       	ld	r20, Y+
 d8a:	59 91       	ld	r21, Y+
 d8c:	c4 0f       	add	r28, r20
 d8e:	d5 1f       	adc	r29, r21
 d90:	ec 17       	cp	r30, r28
 d92:	fd 07       	cpc	r31, r29
 d94:	61 f4       	brne	.+24     	; 0xdae <free+0xbe>
 d96:	80 81       	ld	r24, Z
 d98:	91 81       	ldd	r25, Z+1	; 0x01
 d9a:	84 0f       	add	r24, r20
 d9c:	95 1f       	adc	r25, r21
 d9e:	02 96       	adiw	r24, 0x02	; 2
 da0:	e9 01       	movw	r28, r18
 da2:	99 83       	std	Y+1, r25	; 0x01
 da4:	88 83       	st	Y, r24
 da6:	82 81       	ldd	r24, Z+2	; 0x02
 da8:	93 81       	ldd	r25, Z+3	; 0x03
 daa:	9b 83       	std	Y+3, r25	; 0x03
 dac:	8a 83       	std	Y+2, r24	; 0x02
 dae:	e0 e0       	ldi	r30, 0x00	; 0
 db0:	f0 e0       	ldi	r31, 0x00	; 0
 db2:	12 96       	adiw	r26, 0x02	; 2
 db4:	8d 91       	ld	r24, X+
 db6:	9c 91       	ld	r25, X
 db8:	13 97       	sbiw	r26, 0x03	; 3
 dba:	00 97       	sbiw	r24, 0x00	; 0
 dbc:	19 f0       	breq	.+6      	; 0xdc4 <free+0xd4>
 dbe:	fd 01       	movw	r30, r26
 dc0:	dc 01       	movw	r26, r24
 dc2:	f7 cf       	rjmp	.-18     	; 0xdb2 <free+0xc2>
 dc4:	8d 91       	ld	r24, X+
 dc6:	9c 91       	ld	r25, X
 dc8:	11 97       	sbiw	r26, 0x01	; 1
 dca:	9d 01       	movw	r18, r26
 dcc:	2e 5f       	subi	r18, 0xFE	; 254
 dce:	3f 4f       	sbci	r19, 0xFF	; 255
 dd0:	82 0f       	add	r24, r18
 dd2:	93 1f       	adc	r25, r19
 dd4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 dd8:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 ddc:	28 17       	cp	r18, r24
 dde:	39 07       	cpc	r19, r25
 de0:	69 f4       	brne	.+26     	; 0xdfc <free+0x10c>
 de2:	30 97       	sbiw	r30, 0x00	; 0
 de4:	29 f4       	brne	.+10     	; 0xdf0 <free+0x100>
 de6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__flp+0x1>
 dea:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__flp>
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <free+0x104>
 df0:	13 82       	std	Z+3, r1	; 0x03
 df2:	12 82       	std	Z+2, r1	; 0x02
 df4:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <__brkval+0x1>
 df8:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <__brkval>
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <_exit>:
 e02:	f8 94       	cli

00000e04 <__stop_program>:
 e04:	ff cf       	rjmp	.-2      	; 0xe04 <__stop_program>
