
arduino_pomodoro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000014f8  0000158c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  00800188  00800188  00001614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a8e3  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024e5  00000000  00000000  0000c40f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000273e  00000000  00000000  0000e8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  00011034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002868  00000000  00000000  00011d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d36  00000000  00000000  000145a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  000182d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_18>
      4c:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	df 06       	cpc	r13, r31

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 ef       	ldi	r30, 0xF8	; 248
      d8:	f4 e1       	ldi	r31, 0x14	; 20
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 38       	cpi	r26, 0x88	; 136
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	a8 e8       	ldi	r26, 0x88	; 136
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 34       	cpi	r26, 0x44	; 68
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <main>
     110:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN14BatteryMonitorC1Ehhhm>:
  this->startOfPeriod = this->prevTime;
  this->monitorPeriod = monitorPeriod;
  this->isMonitoring = false;
}

BatteryMonitor::~BatteryMonitor()
     118:	8f 92       	push	r8
     11a:	9f 92       	push	r9
     11c:	af 92       	push	r10
     11e:	bf 92       	push	r11
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	ec 01       	movw	r28, r24
     132:	86 2f       	mov	r24, r22
     134:	c4 2e       	mov	r12, r20
     136:	d2 2e       	mov	r13, r18
     138:	6c 87       	std	Y+12, r22	; 0x0c
     13a:	4d 87       	std	Y+13, r20	; 0x0d
     13c:	2e 87       	std	Y+14, r18	; 0x0e
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	8c 2d       	mov	r24, r12
     148:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	8d 2d       	mov	r24, r13
     150:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
     154:	61 e0       	ldi	r22, 0x01	; 1
     156:	8c 85       	ldd	r24, Y+12	; 0x0c
     158:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	8e 85       	ldd	r24, Y+14	; 0x0e
     160:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
     164:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     168:	68 83       	st	Y, r22
     16a:	79 83       	std	Y+1, r23	; 0x01
     16c:	8a 83       	std	Y+2, r24	; 0x02
     16e:	9b 83       	std	Y+3, r25	; 0x03
     170:	68 87       	std	Y+8, r22	; 0x08
     172:	79 87       	std	Y+9, r23	; 0x09
     174:	8a 87       	std	Y+10, r24	; 0x0a
     176:	9b 87       	std	Y+11, r25	; 0x0b
     178:	ec 82       	std	Y+4, r14	; 0x04
     17a:	fd 82       	std	Y+5, r15	; 0x05
     17c:	0e 83       	std	Y+6, r16	; 0x06
     17e:	1f 83       	std	Y+7, r17	; 0x07
     180:	1f 86       	std	Y+15, r1	; 0x0f
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	df 90       	pop	r13
     190:	cf 90       	pop	r12
     192:	bf 90       	pop	r11
     194:	af 90       	pop	r10
     196:	9f 90       	pop	r9
     198:	8f 90       	pop	r8
     19a:	08 95       	ret

0000019c <_ZN14BatteryMonitor18checkBatteryStatusEv>:
{
}

void BatteryMonitor::checkBatteryStatus()
{
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
  unsigned long curtTime = millis();
     1aa:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
  if (curtTime - this->prevTime > monitorPeriod)
     1b2:	88 81       	ld	r24, Y
     1b4:	99 81       	ldd	r25, Y+1	; 0x01
     1b6:	aa 81       	ldd	r26, Y+2	; 0x02
     1b8:	bb 81       	ldd	r27, Y+3	; 0x03
     1ba:	b7 01       	movw	r22, r14
     1bc:	a6 01       	movw	r20, r12
     1be:	48 1b       	sub	r20, r24
     1c0:	59 0b       	sbc	r21, r25
     1c2:	6a 0b       	sbc	r22, r26
     1c4:	7b 0b       	sbc	r23, r27
     1c6:	8c 81       	ldd	r24, Y+4	; 0x04
     1c8:	9d 81       	ldd	r25, Y+5	; 0x05
     1ca:	ae 81       	ldd	r26, Y+6	; 0x06
     1cc:	bf 81       	ldd	r27, Y+7	; 0x07
     1ce:	84 17       	cp	r24, r20
     1d0:	95 07       	cpc	r25, r21
     1d2:	a6 07       	cpc	r26, r22
     1d4:	b7 07       	cpc	r27, r23
     1d6:	98 f5       	brcc	.+102    	; 0x23e <_ZN14BatteryMonitor18checkBatteryStatusEv+0xa2>
  {
    digitalWrite(this->batteryEnablePin, LOW);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	8c 85       	ldd	r24, Y+12	; 0x0c
     1dc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
    if (!this->isMonitoring)
     1e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1e2:	81 11       	cpse	r24, r1
     1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <_ZN14BatteryMonitor18checkBatteryStatusEv+0x5a>
    {
      this->isMonitoring = true;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	8f 87       	std	Y+15, r24	; 0x0f
      this->startOfPeriod = millis();
     1ea:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     1ee:	68 87       	std	Y+8, r22	; 0x08
     1f0:	79 87       	std	Y+9, r23	; 0x09
     1f2:	8a 87       	std	Y+10, r24	; 0x0a
     1f4:	9b 87       	std	Y+11, r25	; 0x0b
    }
    if (curtTime - this->startOfPeriod > 20)
     1f6:	88 85       	ldd	r24, Y+8	; 0x08
     1f8:	99 85       	ldd	r25, Y+9	; 0x09
     1fa:	aa 85       	ldd	r26, Y+10	; 0x0a
     1fc:	bb 85       	ldd	r27, Y+11	; 0x0b
     1fe:	c8 1a       	sub	r12, r24
     200:	d9 0a       	sbc	r13, r25
     202:	ea 0a       	sbc	r14, r26
     204:	fb 0a       	sbc	r15, r27
     206:	85 e1       	ldi	r24, 0x15	; 21
     208:	c8 16       	cp	r12, r24
     20a:	d1 04       	cpc	r13, r1
     20c:	e1 04       	cpc	r14, r1
     20e:	f1 04       	cpc	r15, r1
     210:	b0 f0       	brcs	.+44     	; 0x23e <_ZN14BatteryMonitor18checkBatteryStatusEv+0xa2>
    {
      bool batteryStat = digitalRead(this->batteryMonitorPin);
     212:	8d 85       	ldd	r24, Y+13	; 0x0d
     214:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
      if (batteryStat == LOW)
     218:	89 2b       	or	r24, r25
     21a:	11 f4       	brne	.+4      	; 0x220 <_ZN14BatteryMonitor18checkBatteryStatusEv+0x84>
      {
        digitalWrite(this->batteryLEDPin, HIGH);
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	01 c0       	rjmp	.+2      	; 0x222 <_ZN14BatteryMonitor18checkBatteryStatusEv+0x86>
      }
      else
      {
        digitalWrite(this->batteryLEDPin, LOW);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	8e 85       	ldd	r24, Y+14	; 0x0e
     224:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
      }
      digitalWrite(this->batteryEnablePin, HIGH);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	8c 85       	ldd	r24, Y+12	; 0x0c
     22c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
      this->prevTime = millis();
     230:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     234:	68 83       	st	Y, r22
     236:	79 83       	std	Y+1, r23	; 0x01
     238:	8a 83       	std	Y+2, r24	; 0x02
     23a:	9b 83       	std	Y+3, r25	; 0x03
      this->isMonitoring = false;
     23c:	1f 86       	std	Y+15, r1	; 0x0f
    }
  }
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	08 95       	ret

0000024c <_ZN6ButtonC1Ehbb>:
	this->lastDebounceTime = 0;
}

Button::~Button()
{
	disattach();
     24c:	fc 01       	movw	r30, r24
     24e:	60 83       	st	Z, r22
     250:	41 83       	std	Z+1, r20	; 0x01
     252:	22 83       	std	Z+2, r18	; 0x02
     254:	13 82       	std	Z+3, r1	; 0x03
     256:	14 82       	std	Z+4, r1	; 0x04
     258:	15 82       	std	Z+5, r1	; 0x05
     25a:	16 82       	std	Z+6, r1	; 0x06
     25c:	08 95       	ret

0000025e <_ZN6Button10isRiseEdgeEv>:
	digitalWrite(pin, LOW);
	pinMode(pin, INPUT);
}

bool Button::isRiseEdge()
{
     25e:	cf 92       	push	r12
     260:	df 92       	push	r13
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
     268:	1f 93       	push	r17
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	ec 01       	movw	r28, r24
	bool res = false;
	unsigned long debounceDelay = 50;
	int reading = digitalRead(pin);
     270:	88 81       	ld	r24, Y
     272:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
     276:	8c 01       	movw	r16, r24

	if (reading != lastButtonState)
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	08 17       	cp	r16, r24
     27e:	19 07       	cpc	r17, r25
     280:	31 f0       	breq	.+12     	; 0x28e <_ZN6Button10isRiseEdgeEv+0x30>
	{
		lastDebounceTime = millis();
     282:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     286:	6b 83       	std	Y+3, r22	; 0x03
     288:	7c 83       	std	Y+4, r23	; 0x04
     28a:	8d 83       	std	Y+5, r24	; 0x05
     28c:	9e 83       	std	Y+6, r25	; 0x06
	}

	if (abs(millis() - lastDebounceTime) > debounceDelay)
     28e:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     292:	6b 01       	movw	r12, r22
     294:	7c 01       	movw	r14, r24
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	9c 81       	ldd	r25, Y+4	; 0x04
     29a:	ad 81       	ldd	r26, Y+5	; 0x05
     29c:	be 81       	ldd	r27, Y+6	; 0x06
     29e:	c8 16       	cp	r12, r24
     2a0:	d9 06       	cpc	r13, r25
     2a2:	ea 06       	cpc	r14, r26
     2a4:	fb 06       	cpc	r15, r27
     2a6:	79 f0       	breq	.+30     	; 0x2c6 <_ZN6Button10isRiseEdgeEv+0x68>
     2a8:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     2ac:	cb 80       	ldd	r12, Y+3	; 0x03
     2ae:	dc 80       	ldd	r13, Y+4	; 0x04
     2b0:	ed 80       	ldd	r14, Y+5	; 0x05
     2b2:	fe 80       	ldd	r15, Y+6	; 0x06
     2b4:	9b 01       	movw	r18, r22
     2b6:	ac 01       	movw	r20, r24
     2b8:	2c 19       	sub	r18, r12
     2ba:	3d 09       	sbc	r19, r13
     2bc:	4e 09       	sbc	r20, r14
     2be:	5f 09       	sbc	r21, r15
     2c0:	69 01       	movw	r12, r18
     2c2:	7a 01       	movw	r14, r20
     2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <_ZN6Button10isRiseEdgeEv+0x74>
     2c6:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     2ca:	c6 1a       	sub	r12, r22
     2cc:	d7 0a       	sbc	r13, r23
     2ce:	e8 0a       	sbc	r14, r24
     2d0:	f9 0a       	sbc	r15, r25
     2d2:	33 e3       	ldi	r19, 0x33	; 51
     2d4:	c3 16       	cp	r12, r19
     2d6:	d1 04       	cpc	r13, r1
     2d8:	e1 04       	cpc	r14, r1
     2da:	f1 04       	cpc	r15, r1
     2dc:	60 f0       	brcs	.+24     	; 0x2f6 <_ZN6Button10isRiseEdgeEv+0x98>
	{
		if (reading != buttonState)
     2de:	8a 81       	ldd	r24, Y+2	; 0x02
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 17       	cp	r16, r24
     2e4:	19 07       	cpc	r17, r25
     2e6:	39 f0       	breq	.+14     	; 0x2f6 <_ZN6Button10isRiseEdgeEv+0x98>
		{
			buttonState = reading;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	01 15       	cp	r16, r1
     2ec:	11 05       	cpc	r17, r1
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <_ZN6Button10isRiseEdgeEv+0x94>
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <_ZN6Button10isRiseEdgeEv+0x9a>
	pinMode(pin, INPUT);
}

bool Button::isRiseEdge()
{
	bool res = false;
     2f6:	80 e0       	ldi	r24, 0x00	; 0
			{
				res = true;
			}
		}
	}
	lastButtonState = reading;
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	01 2b       	or	r16, r17
     2fc:	09 f4       	brne	.+2      	; 0x300 <_ZN6Button10isRiseEdgeEv+0xa2>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	99 83       	std	Y+1, r25	; 0x01
	return res;
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <_ZN3LEDC1Ehb>:
  }
}

void LED::resetBlink()
{
  this->blinkCount = 0;
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	ec 01       	movw	r28, r24
     31c:	86 2f       	mov	r24, r22
     31e:	14 2f       	mov	r17, r20
     320:	68 83       	st	Y, r22
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
     328:	61 2f       	mov	r22, r17
     32a:	88 81       	ld	r24, Y
     32c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <digitalWrite>
     330:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     334:	1d 82       	std	Y+5, r1	; 0x05
     336:	69 83       	std	Y+1, r22	; 0x01
     338:	7a 83       	std	Y+2, r23	; 0x02
     33a:	8b 83       	std	Y+3, r24	; 0x03
     33c:	9c 83       	std	Y+4, r25	; 0x04
     33e:	6e 83       	std	Y+6, r22	; 0x06
     340:	7f 83       	std	Y+7, r23	; 0x07
     342:	88 87       	std	Y+8, r24	; 0x08
     344:	99 87       	std	Y+9, r25	; 0x09
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	08 95       	ret

0000034e <_ZN3LED2onEv>:
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	fc 01       	movw	r30, r24
     352:	80 81       	ld	r24, Z
     354:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

00000358 <_ZN3LED3offEv>:
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	fc 01       	movw	r30, r24
     35c:	80 81       	ld	r24, Z
     35e:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

00000362 <_ZN3LED8getStateEv>:
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	89 2b       	or	r24, r25
     36e:	09 f4       	brne	.+2      	; 0x372 <_ZN3LED8getStateEv+0x10>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	82 2f       	mov	r24, r18
     374:	08 95       	ret

00000376 <_ZN3LED5blinkEjh>:
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	8d 81       	ldd	r24, Y+5	; 0x05
     38a:	84 17       	cp	r24, r20
     38c:	50 f5       	brcc	.+84     	; 0x3e2 <_ZN3LED5blinkEjh+0x6c>
     38e:	8b 01       	movw	r16, r22
     390:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     394:	6b 01       	movw	r12, r22
     396:	7c 01       	movw	r14, r24
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	ab 81       	ldd	r26, Y+3	; 0x03
     39e:	bc 81       	ldd	r27, Y+4	; 0x04
     3a0:	b7 01       	movw	r22, r14
     3a2:	a6 01       	movw	r20, r12
     3a4:	48 1b       	sub	r20, r24
     3a6:	59 0b       	sbc	r21, r25
     3a8:	6a 0b       	sbc	r22, r26
     3aa:	7b 0b       	sbc	r23, r27
     3ac:	c8 01       	movw	r24, r16
     3ae:	a0 e0       	ldi	r26, 0x00	; 0
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	84 17       	cp	r24, r20
     3b4:	95 07       	cpc	r25, r21
     3b6:	a6 07       	cpc	r26, r22
     3b8:	b7 07       	cpc	r27, r23
     3ba:	98 f4       	brcc	.+38     	; 0x3e2 <_ZN3LED5blinkEjh+0x6c>
     3bc:	ce 01       	movw	r24, r28
     3be:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN3LED8getStateEv>
     3c2:	81 11       	cpse	r24, r1
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <_ZN3LED5blinkEjh+0x58>
     3c6:	ce 01       	movw	r24, r28
     3c8:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN3LED2onEv>
     3cc:	06 c0       	rjmp	.+12     	; 0x3da <_ZN3LED5blinkEjh+0x64>
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN3LED3offEv>
     3d4:	8d 81       	ldd	r24, Y+5	; 0x05
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	8d 83       	std	Y+5, r24	; 0x05
     3da:	c9 82       	std	Y+1, r12	; 0x01
     3dc:	da 82       	std	Y+2, r13	; 0x02
     3de:	eb 82       	std	Y+3, r14	; 0x03
     3e0:	fc 82       	std	Y+4, r15	; 0x04
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	cf 90       	pop	r12
     3f2:	08 95       	ret

000003f4 <_ZN3LED11periodBlinkEjhj>:
}

void LED::periodBlink(unsigned int pulseWidth, byte blinkTimes, unsigned int period)
{
     3f4:	4f 92       	push	r4
     3f6:	5f 92       	push	r5
     3f8:	6f 92       	push	r6
     3fa:	7f 92       	push	r7
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	8c 01       	movw	r16, r24
     410:	b4 2e       	mov	r11, r20
  pulseWidth = pulseWidth < 100 ? 100 : pulseWidth;
     412:	eb 01       	movw	r28, r22
     414:	64 36       	cpi	r22, 0x64	; 100
     416:	71 05       	cpc	r23, r1
     418:	10 f4       	brcc	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	c4 e6       	ldi	r28, 0x64	; 100
     41c:	d0 e0       	ldi	r29, 0x00	; 0
  period = period < pulseWidth * blinkTimes * 2 ? pulseWidth * blinkTimes * 2 : period;
     41e:	8b 2d       	mov	r24, r11
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	8c 9f       	mul	r24, r28
     428:	60 01       	movw	r12, r0
     42a:	8d 9f       	mul	r24, r29
     42c:	d0 0c       	add	r13, r0
     42e:	9c 9f       	mul	r25, r28
     430:	d0 0c       	add	r13, r0
     432:	11 24       	eor	r1, r1
     434:	c2 16       	cp	r12, r18
     436:	d3 06       	cpc	r13, r19
     438:	08 f4       	brcc	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	69 01       	movw	r12, r18
  unsigned long curtTime = millis();
     43c:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
  if (curtTime - this->prevPeriod > period)
     440:	f8 01       	movw	r30, r16
     442:	46 80       	ldd	r4, Z+6	; 0x06
     444:	57 80       	ldd	r5, Z+7	; 0x07
     446:	60 84       	ldd	r6, Z+8	; 0x08
     448:	71 84       	ldd	r7, Z+9	; 0x09
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	24 19       	sub	r18, r4
     450:	35 09       	sbc	r19, r5
     452:	46 09       	sbc	r20, r6
     454:	57 09       	sbc	r21, r7
     456:	e1 2c       	mov	r14, r1
     458:	f1 2c       	mov	r15, r1
     45a:	c2 16       	cp	r12, r18
     45c:	d3 06       	cpc	r13, r19
     45e:	e4 06       	cpc	r14, r20
     460:	f5 06       	cpc	r15, r21
     462:	90 f4       	brcc	.+36     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
  }
}

void LED::resetBlink()
{
  this->blinkCount = 0;
     464:	15 82       	std	Z+5, r1	; 0x05
  period = period < pulseWidth * blinkTimes * 2 ? pulseWidth * blinkTimes * 2 : period;
  unsigned long curtTime = millis();
  if (curtTime - this->prevPeriod > period)
  {
    this->resetBlink();
    this->prevPeriod = curtTime;
     466:	66 83       	std	Z+6, r22	; 0x06
     468:	77 83       	std	Z+7, r23	; 0x07
     46a:	80 87       	std	Z+8, r24	; 0x08
     46c:	91 87       	std	Z+9, r25	; 0x09
    this->prevBlinkTime = curtTime - (pulseWidth + 10); // sync  on/off period with blink period
     46e:	9e 01       	movw	r18, r28
     470:	26 5f       	subi	r18, 0xF6	; 246
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	82 1b       	sub	r24, r18
     47a:	93 0b       	sbc	r25, r19
     47c:	a1 09       	sbc	r26, r1
     47e:	b1 09       	sbc	r27, r1
     480:	81 83       	std	Z+1, r24	; 0x01
     482:	92 83       	std	Z+2, r25	; 0x02
     484:	a3 83       	std	Z+3, r26	; 0x03
     486:	b4 83       	std	Z+4, r27	; 0x04
  }
  this->blink(pulseWidth, blinkTimes);
     488:	4b 2d       	mov	r20, r11
     48a:	be 01       	movw	r22, r28
     48c:	c8 01       	movw	r24, r16
}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	7f 90       	pop	r7
     4a2:	6f 90       	pop	r6
     4a4:	5f 90       	pop	r5
     4a6:	4f 90       	pop	r4
  {
    this->resetBlink();
    this->prevPeriod = curtTime;
    this->prevBlinkTime = curtTime - (pulseWidth + 10); // sync  on/off period with blink period
  }
  this->blink(pulseWidth, blinkTimes);
     4a8:	0c 94 bb 01 	jmp	0x376	; 0x376 <_ZN3LED5blinkEjh>

000004ac <_ZN3LED7powerOnEv>:
}

void LED::powerOn()
{
  this->on();
     4ac:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_ZN3LED2onEv>

000004b0 <_ZN3LED8powerOffEv>:
}

void LED::powerOff()
{
  this->off();
     4b0:	0c 94 ac 01 	jmp	0x358	; 0x358 <_ZN3LED3offEv>

000004b4 <_ZN3LED12timerRunningEv>:
}

void LED::timerRunning()
{
  this->periodBlink(200, 1, 400);
     4b4:	20 e9       	ldi	r18, 0x90	; 144
     4b6:	31 e0       	ldi	r19, 0x01	; 1
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	68 ec       	ldi	r22, 0xC8	; 200
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_ZN3LED11periodBlinkEjhj>

000004c2 <_ZN3LED7walkingEv>:
}

void LED::walking()
{
  this->periodBlink(400, 1, 800);
     4c2:	20 e2       	ldi	r18, 0x20	; 32
     4c4:	33 e0       	ldi	r19, 0x03	; 3
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	60 e9       	ldi	r22, 0x90	; 144
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_ZN3LED11periodBlinkEjhj>

000004d0 <_ZN3LED7snoozedEv>:
}

void LED::snoozed()
{
  this->periodBlink(200, 2, 2500);
     4d0:	24 ec       	ldi	r18, 0xC4	; 196
     4d2:	39 e0       	ldi	r19, 0x09	; 9
     4d4:	42 e0       	ldi	r20, 0x02	; 2
     4d6:	68 ec       	ldi	r22, 0xC8	; 200
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_ZN3LED11periodBlinkEjhj>

000004de <_ZN5MotorC1Eib>:
}

Motor::~Motor()
{
  digitalWrite(this->motorPin, LOW);
  pinMode(this->motorPin, INPUT);
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	ec 01       	movw	r28, r24
     4e4:	86 2f       	mov	r24, r22
     4e6:	68 83       	st	Y, r22
     4e8:	79 83       	std	Y+1, r23	; 0x01
     4ea:	4a 83       	std	Y+2, r20	; 0x02
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	0e 94 9d 08 	call	0x113a	; 0x113a <pinMode>
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	88 81       	ld	r24, Y
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

000004fe <_ZN5Motor5startEv>:
}

void Motor::start()
{
  this->state = HIGH;
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	fc 01       	movw	r30, r24
     502:	22 83       	std	Z+2, r18	; 0x02
  digitalWrite(this->motorPin, HIGH);
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	80 81       	ld	r24, Z
     508:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

0000050c <_ZN5Motor4stopEv>:
}

void Motor::stop()
{
  this->state = LOW;
     50c:	fc 01       	movw	r30, r24
     50e:	12 82       	std	Z+2, r1	; 0x02
  digitalWrite(this->motorPin, LOW);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <digitalWrite>

00000518 <_Z13hardwareSetupv>:
// Motor *motor;
// LED *led;

void hardwareSetup()
{
  pinMode(timePin, INPUT);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	0c 94 9d 08 	jmp	0x113a	; 0x113a <pinMode>

00000520 <_Z22is_preset_time_reachedv>:
	return main_button->isRiseEdge();
}

bool is_preset_time_reached()
{
	return workTimer->isOvertime();
     520:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     524:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     528:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_ZN5Timer10isOvertimeEv>

0000052c <_Z23is_time_setting_changedv>:
}

bool is_time_setting_changed()
{
	return workTimer->isThresholdChanged(timePin);
     52c:	64 e0       	ldi	r22, 0x04	; 4
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     534:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     538:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_ZN5Timer18isThresholdChangedEi>

0000053c <_Z22is_walk_button_pressedv>:
}

bool is_walk_button_pressed()
{
	return main_button->isRiseEdge();
     53c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <main_button>
     540:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <main_button+0x1>
     544:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN6Button10isRiseEdgeEv>

00000548 <_Z24is_snooze_button_pressedv>:
}

bool is_snooze_button_pressed()
{
	return snooze_button->isRiseEdge();
     548:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <snooze_button>
     54c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <snooze_button+0x1>
     550:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_ZN6Button10isRiseEdgeEv>

00000554 <_Z21is_vibrating_overtimev>:
}

bool is_vibrating_overtime()
{
	return vibrateTimer->isOvertime();
     554:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     558:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     55c:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_ZN5Timer10isOvertimeEv>

00000560 <_Z23is_snoozed_time_reachedv>:
}

bool is_snoozed_time_reached()
{
	return snoozeTimer->isOvertime();
     560:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <snoozeTimer>
     564:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <snoozeTimer+0x1>
     568:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_ZN5Timer10isOvertimeEv>

0000056c <setup>:
}

void setup()
{
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	// Library Setup
	hardwareSetup();
     578:	0e 94 8c 02 	call	0x518	; 0x518 <_Z13hardwareSetupv>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     57c:	26 e0       	ldi	r18, 0x06	; 6
     57e:	40 e8       	ldi	r20, 0x80	; 128
     580:	55 e2       	ldi	r21, 0x25	; 37
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	8a e9       	ldi	r24, 0x9A	; 154
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN14HardwareSerial5beginEmh>

	#ifdef _DEBUG_
	// Serial Initialize
	Serial.begin(9600);
	Serial.println("Initialize Counter");
     58e:	66 e0       	ldi	r22, 0x06	; 6
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	8a e9       	ldi	r24, 0x9A	; 154
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
	#endif

	// State initialize
	state = IDLE;
     59a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <state+0x1>
     59e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <state>

	workTimer = new Timer(worktime, 1000);
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     5aa:	ec 01       	movw	r28, r24
     5ac:	48 ee       	ldi	r20, 0xE8	; 232
     5ae:	53 e0       	ldi	r21, 0x03	; 3
     5b0:	64 e1       	ldi	r22, 0x14	; 20
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN5TimerC1Ejj>
     5b8:	d0 93 97 01 	sts	0x0197, r29	; 0x800197 <workTimer+0x1>
     5bc:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <workTimer>
	vibrateTimer = new Timer(vibratetime, 1000);
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     5c8:	ec 01       	movw	r28, r24
     5ca:	48 ee       	ldi	r20, 0xE8	; 232
     5cc:	53 e0       	ldi	r21, 0x03	; 3
     5ce:	6a e0       	ldi	r22, 0x0A	; 10
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN5TimerC1Ejj>
     5d6:	d0 93 95 01 	sts	0x0195, r29	; 0x800195 <vibrateTimer+0x1>
     5da:	c0 93 94 01 	sts	0x0194, r28	; 0x800194 <vibrateTimer>
	snoozeTimer = new Timer(snoozetime, 1000);
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     5e6:	ec 01       	movw	r28, r24
     5e8:	48 ee       	ldi	r20, 0xE8	; 232
     5ea:	53 e0       	ldi	r21, 0x03	; 3
     5ec:	67 e0       	ldi	r22, 0x07	; 7
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN5TimerC1Ejj>
     5f4:	d0 93 93 01 	sts	0x0193, r29	; 0x800193 <snoozeTimer+0x1>
     5f8:	c0 93 92 01 	sts	0x0192, r28	; 0x800192 <snoozeTimer>

	main_button = new Button(main_button_pin, LOW, LOW);
     5fc:	87 e0       	ldi	r24, 0x07	; 7
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     604:	ec 01       	movw	r28, r24
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN6ButtonC1Ehbb>
     610:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <main_button+0x1>
     614:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <main_button>
	snooze_button = new Button(snooze_button_pin, LOW, LOW);
     618:	87 e0       	ldi	r24, 0x07	; 7
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     620:	ec 01       	movw	r28, r24
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	63 e0       	ldi	r22, 0x03	; 3
     628:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN6ButtonC1Ehbb>
     62c:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <snooze_button+0x1>
     630:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <snooze_button>

	motor = new Motor(motorPin);
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     63c:	ec 01       	movw	r28, r24
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	69 e0       	ldi	r22, 0x09	; 9
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN5MotorC1Eib>
     648:	d0 93 8d 01 	sts	0x018D, r29	; 0x80018d <motor+0x1>
     64c:	c0 93 8c 01 	sts	0x018C, r28	; 0x80018c <motor>

	led = new LED(ledPin, LOW);
     650:	8c e0       	ldi	r24, 0x0C	; 12
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     658:	ec 01       	movw	r28, r24
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	63 e1       	ldi	r22, 0x13	; 19
     65e:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN3LEDC1Ehb>
     662:	d0 93 8b 01 	sts	0x018B, r29	; 0x80018b <led+0x1>
     666:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <led>

	batteryMonitor = new BatteryMonitor(batteryEnablePin, batteryMonitorPin, batteryLEDPin, batteryMonitorPeriod);
     66a:	80 e1       	ldi	r24, 0x10	; 16
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 1c 07 	call	0xe38	; 0xe38 <_Znwj>
     672:	ec 01       	movw	r28, r24
     674:	18 ee       	ldi	r17, 0xE8	; 232
     676:	e1 2e       	mov	r14, r17
     678:	13 e0       	ldi	r17, 0x03	; 3
     67a:	f1 2e       	mov	r15, r17
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	20 e1       	ldi	r18, 0x10	; 16
     682:	41 e1       	ldi	r20, 0x11	; 17
     684:	62 e1       	ldi	r22, 0x12	; 18
     686:	ce 01       	movw	r24, r28
     688:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN14BatteryMonitorC1Ehhhm>
     68c:	d0 93 89 01 	sts	0x0189, r29	; 0x800189 <__data_end+0x1>
     690:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <__data_end>
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	08 95       	ret

000006a2 <loop>:

void loop()
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	switch (state)
     6a6:	c0 91 98 01 	lds	r28, 0x0198	; 0x800198 <state>
     6aa:	d0 91 99 01 	lds	r29, 0x0199	; 0x800199 <state+0x1>
     6ae:	c4 30       	cpi	r28, 0x04	; 4
     6b0:	d1 05       	cpc	r29, r1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <loop+0x14>
     6b4:	9f c0       	rjmp	.+318    	; 0x7f4 <loop+0x152>
     6b6:	34 f4       	brge	.+12     	; 0x6c4 <loop+0x22>
     6b8:	20 97       	sbiw	r28, 0x00	; 0
     6ba:	71 f1       	breq	.+92     	; 0x718 <loop+0x76>
     6bc:	22 97       	sbiw	r28, 0x02	; 2
     6be:	09 f4       	brne	.+2      	; 0x6c2 <loop+0x20>
     6c0:	4d c0       	rjmp	.+154    	; 0x75c <loop+0xba>
     6c2:	4d c1       	rjmp	.+666    	; 0x95e <__stack+0x5f>
     6c4:	c0 31       	cpi	r28, 0x10	; 16
     6c6:	d1 05       	cpc	r29, r1
     6c8:	09 f4       	brne	.+2      	; 0x6cc <loop+0x2a>
     6ca:	ea c0       	rjmp	.+468    	; 0x8a0 <loop+0x1fe>
     6cc:	c0 32       	cpi	r28, 0x20	; 32
     6ce:	d1 05       	cpc	r29, r1
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <loop+0x32>
     6d2:	01 c1       	rjmp	.+514    	; 0x8d6 <loop+0x234>
     6d4:	28 97       	sbiw	r28, 0x08	; 8
     6d6:	09 f0       	breq	.+2      	; 0x6da <loop+0x38>
     6d8:	42 c1       	rjmp	.+644    	; 0x95e <__stack+0x5f>
			state = VIBRATING;
		}
		break;
		case WALKING:
		#ifdef _DEBUG_
		Serial.println("WALKING");
     6da:	6d e4       	ldi	r22, 0x4D	; 77
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	8a e9       	ldi	r24, 0x9A	; 154
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		#endif
		led->walking();
     6e6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <led>
     6ea:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <led+0x1>
     6ee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN3LED7walkingEv>
		motor->stop();
     6f2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <motor>
     6f6:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <motor+0x1>
     6fa:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN5Motor4stopEv>
		workTimer->reset();
     6fe:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     702:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     706:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Timer5resetEv>
		vibrateTimer->reset();
     70a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     70e:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     712:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Timer5resetEv>
     716:	bf c0       	rjmp	.+382    	; 0x896 <loop+0x1f4>
{
	switch (state)
	{
		case IDLE:
		#ifdef _DEBUG_
		Serial.println("IDLE");
     718:	69 e1       	ldi	r22, 0x19	; 25
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	8a e9       	ldi	r24, 0x9A	; 154
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		#endif
		led->powerOn();
     724:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <led>
     728:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <led+0x1>
     72c:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN3LED7powerOnEv>
		workTimer->readTimeSetting(timePin);
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     738:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     73c:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN5Timer15readTimeSettingEi>
		batteryMonitor->checkBatteryStatus();
     740:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
     744:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
     748:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN14BatteryMonitor18checkBatteryStatusEv>
		if (is_start_button_pressed())
     74c:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z22is_walk_button_pressedv>
     750:	88 23       	and	r24, r24
     752:	09 f4       	brne	.+2      	; 0x756 <loop+0xb4>
     754:	04 c1       	rjmp	.+520    	; 0x95e <__stack+0x5f>
		{
			state = TIME_RUNNING;
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	42 c0       	rjmp	.+132    	; 0x7e0 <loop+0x13e>
		}
		break;
		case TIME_RUNNING:
		#ifdef _DEBUG_
		Serial.println("TIME_RUNNING");
     75c:	6e e1       	ldi	r22, 0x1E	; 30
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	8a e9       	ldi	r24, 0x9A	; 154
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		Serial.print("    Timer/Threshold: ");
     768:	6b e2       	ldi	r22, 0x2B	; 43
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	8a e9       	ldi	r24, 0x9A	; 154
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.print(workTimer->getTimer());
     774:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     778:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     77c:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN5Timer8getTimerEv>
     780:	4a e0       	ldi	r20, 0x0A	; 10
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	bc 01       	movw	r22, r24
     786:	8a e9       	ldi	r24, 0x9A	; 154
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printEji>
		Serial.print("/");
     78e:	61 e4       	ldi	r22, 0x41	; 65
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	8a e9       	ldi	r24, 0x9A	; 154
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.println(workTimer->getThreshold());
     79a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     79e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     7a2:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN5Timer12getThresholdEv>
     7a6:	4a e0       	ldi	r20, 0x0A	; 10
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	bc 01       	movw	r22, r24
     7ac:	8a e9       	ldi	r24, 0x9A	; 154
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN5Print7printlnEji>
		#endif
		led->timerRunning();
     7b4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <led>
     7b8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <led+0x1>
     7bc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN3LED12timerRunningEv>
		workTimer->run();
     7c0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <workTimer>
     7c4:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <workTimer+0x1>
     7c8:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN5Timer3runEv>
		if (is_pause_button_pressed())
     7cc:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z22is_walk_button_pressedv>
     7d0:	81 11       	cpse	r24, r1
     7d2:	61 c0       	rjmp	.+194    	; 0x896 <loop+0x1f4>
		{
			state = IDLE;
		}
		else if (is_preset_time_reached())
     7d4:	0e 94 90 02 	call	0x520	; 0x520 <_Z22is_preset_time_reachedv>
     7d8:	88 23       	and	r24, r24
     7da:	39 f0       	breq	.+14     	; 0x7ea <loop+0x148>
		{
			state = VIBRATING;
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <state+0x1>
     7e4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <state>
     7e8:	ba c0       	rjmp	.+372    	; 0x95e <__stack+0x5f>
		}
		else if (is_time_setting_changed())
     7ea:	0e 94 96 02 	call	0x52c	; 0x52c <_Z23is_time_setting_changedv>
     7ee:	81 11       	cpse	r24, r1
     7f0:	52 c0       	rjmp	.+164    	; 0x896 <loop+0x1f4>
     7f2:	b1 cf       	rjmp	.-158    	; 0x756 <loop+0xb4>
			state = TIME_RUNNING;
		}
		break;
		case VIBRATING:
		#ifdef _DEBUG_
		Serial.println("VIBRATING");
     7f4:	63 e4       	ldi	r22, 0x43	; 67
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	8a e9       	ldi	r24, 0x9A	; 154
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		Serial.print("    Timer/Threshold: ");
     800:	6b e2       	ldi	r22, 0x2B	; 43
     802:	71 e0       	ldi	r23, 0x01	; 1
     804:	8a e9       	ldi	r24, 0x9A	; 154
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.print(vibrateTimer->getTimer());
     80c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     810:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     814:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN5Timer8getTimerEv>
     818:	4a e0       	ldi	r20, 0x0A	; 10
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	bc 01       	movw	r22, r24
     81e:	8a e9       	ldi	r24, 0x9A	; 154
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printEji>
		Serial.print("/");
     826:	61 e4       	ldi	r22, 0x41	; 65
     828:	71 e0       	ldi	r23, 0x01	; 1
     82a:	8a e9       	ldi	r24, 0x9A	; 154
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.println(vibrateTimer->getThreshold());
     832:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     836:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     83a:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN5Timer12getThresholdEv>
     83e:	4a e0       	ldi	r20, 0x0A	; 10
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	bc 01       	movw	r22, r24
     844:	8a e9       	ldi	r24, 0x9A	; 154
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN5Print7printlnEji>
		#endif
		led->powerOff();
     84c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <led>
     850:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <led+0x1>
     854:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN3LED8powerOffEv>
		motor->start();
     858:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <motor>
     85c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <motor+0x1>
     860:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN5Motor5startEv>
		vibrateTimer->run();
     864:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     868:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     86c:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN5Timer3runEv>
		if (is_walk_button_pressed())
     870:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z22is_walk_button_pressedv>
     874:	88 23       	and	r24, r24
     876:	19 f0       	breq	.+6      	; 0x87e <loop+0x1dc>
		{
			state = WALKING;
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	b1 cf       	rjmp	.-158    	; 0x7e0 <loop+0x13e>
		}
		else if (is_snooze_button_pressed())
     87e:	0e 94 a4 02 	call	0x548	; 0x548 <_Z24is_snooze_button_pressedv>
     882:	88 23       	and	r24, r24
     884:	19 f0       	breq	.+6      	; 0x88c <loop+0x1ea>
		{
			state = SNOOZING;
     886:	80 e1       	ldi	r24, 0x10	; 16
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	aa cf       	rjmp	.-172    	; 0x7e0 <loop+0x13e>
		}
		else if (is_vibrating_overtime())
     88c:	0e 94 aa 02 	call	0x554	; 0x554 <_Z21is_vibrating_overtimev>
     890:	81 11       	cpse	r24, r1
     892:	f2 cf       	rjmp	.-28     	; 0x878 <loop+0x1d6>
     894:	a3 cf       	rjmp	.-186    	; 0x7dc <loop+0x13a>
		#endif
		led->walking();
		motor->stop();
		workTimer->reset();
		vibrateTimer->reset();
		state = IDLE;
     896:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <state+0x1>
     89a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <state>
		break;
     89e:	5f c0       	rjmp	.+190    	; 0x95e <__stack+0x5f>
		case SNOOZING:
		#ifdef _DEBUG_
		Serial.println("SNOOZING");
     8a0:	65 e5       	ldi	r22, 0x55	; 85
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	8a e9       	ldi	r24, 0x9A	; 154
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		#endif
		motor->stop();
     8ac:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <motor>
     8b0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <motor+0x1>
     8b4:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN5Motor4stopEv>
		snoozeTimer->reset();
     8b8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <snoozeTimer>
     8bc:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <snoozeTimer+0x1>
     8c0:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Timer5resetEv>
		vibrateTimer->reset();
     8c4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <vibrateTimer>
     8c8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <vibrateTimer+0x1>
     8cc:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN5Timer5resetEv>
		state = SNOOZED;
     8d0:	80 e2       	ldi	r24, 0x20	; 32
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	85 cf       	rjmp	.-246    	; 0x7e0 <loop+0x13e>
		break;
		case SNOOZED:
		#ifdef _DEBUG_
		Serial.println("SNOOZED");
     8d6:	6e e5       	ldi	r22, 0x5E	; 94
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	8a e9       	ldi	r24, 0x9A	; 154
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN5Print7printlnEPKc>
		Serial.print("    Timer/Threshold: ");
     8e2:	6b e2       	ldi	r22, 0x2B	; 43
     8e4:	71 e0       	ldi	r23, 0x01	; 1
     8e6:	8a e9       	ldi	r24, 0x9A	; 154
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.print(snoozeTimer->getTimer());
     8ee:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <snoozeTimer>
     8f2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <snoozeTimer+0x1>
     8f6:	0e 94 c4 04 	call	0x988	; 0x988 <_ZN5Timer8getTimerEv>
     8fa:	4a e0       	ldi	r20, 0x0A	; 10
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	bc 01       	movw	r22, r24
     900:	8a e9       	ldi	r24, 0x9A	; 154
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printEji>
		Serial.print("/");
     908:	61 e4       	ldi	r22, 0x41	; 65
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	8a e9       	ldi	r24, 0x9A	; 154
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN5Print5printEPKc>
		Serial.println(snoozeTimer->getThreshold());
     914:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <snoozeTimer>
     918:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <snoozeTimer+0x1>
     91c:	0e 94 c8 04 	call	0x990	; 0x990 <_ZN5Timer12getThresholdEv>
     920:	4a e0       	ldi	r20, 0x0A	; 10
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	bc 01       	movw	r22, r24
     926:	8a e9       	ldi	r24, 0x9A	; 154
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN5Print7printlnEji>
		#endif
		led->snoozed();
     92e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <led>
     932:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <led+0x1>
     936:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN3LED7snoozedEv>
		snoozeTimer->run();
     93a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <snoozeTimer>
     93e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <snoozeTimer+0x1>
     942:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN5Timer3runEv>
		if (is_snoozed_time_reached())
     946:	0e 94 b0 02 	call	0x560	; 0x560 <_Z23is_snoozed_time_reachedv>
     94a:	81 11       	cpse	r24, r1
     94c:	47 cf       	rjmp	.-370    	; 0x7dc <loop+0x13a>
		{
			state = VIBRATING;
		}
		else if (is_walk_button_pressed())
     94e:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z22is_walk_button_pressedv>
     952:	81 11       	cpse	r24, r1
     954:	91 cf       	rjmp	.-222    	; 0x878 <loop+0x1d6>
		{
			state = WALKING;
		}
		else
		{
			state = SNOOZED;
     956:	d0 93 99 01 	sts	0x0199, r29	; 0x800199 <state+0x1>
     95a:	c0 93 98 01 	sts	0x0198, r28	; 0x800198 <state>
		}
		break;
	}
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_ZN5TimerC1Ejj>:
  return this->threshold;
}

void Timer::setThreshold(unsigned int threshold)
{
  this->threshold = threshold;
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	19 82       	std	Y+1, r1	; 0x01
     96c:	18 82       	st	Y, r1
     96e:	7b 83       	std	Y+3, r23	; 0x03
     970:	6a 83       	std	Y+2, r22	; 0x02
     972:	5d 83       	std	Y+5, r21	; 0x05
     974:	4c 83       	std	Y+4, r20	; 0x04
     976:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
     97a:	6e 83       	std	Y+6, r22	; 0x06
     97c:	7f 83       	std	Y+7, r23	; 0x07
     97e:	88 87       	std	Y+8, r24	; 0x08
     980:	99 87       	std	Y+9, r25	; 0x09
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <_ZN5Timer8getTimerEv>:
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	91 81       	ldd	r25, Z+1	; 0x01
     98e:	08 95       	ret

00000990 <_ZN5Timer12getThresholdEv>:
     990:	fc 01       	movw	r30, r24
     992:	82 81       	ldd	r24, Z+2	; 0x02
     994:	93 81       	ldd	r25, Z+3	; 0x03
     996:	08 95       	ret

00000998 <_ZN5Timer3runEv>:
}

void Timer::run()
{
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
  unsigned long curtTime = millis();
     9aa:	0e 94 2d 08 	call	0x105a	; 0x105a <millis>
  if (curtTime - this->prevTime >= this->step)
     9ae:	0e 81       	ldd	r16, Y+6	; 0x06
     9b0:	1f 81       	ldd	r17, Y+7	; 0x07
     9b2:	28 85       	ldd	r18, Y+8	; 0x08
     9b4:	39 85       	ldd	r19, Y+9	; 0x09
     9b6:	6b 01       	movw	r12, r22
     9b8:	7c 01       	movw	r14, r24
     9ba:	c0 1a       	sub	r12, r16
     9bc:	d1 0a       	sbc	r13, r17
     9be:	e2 0a       	sbc	r14, r18
     9c0:	f3 0a       	sbc	r15, r19
     9c2:	97 01       	movw	r18, r14
     9c4:	86 01       	movw	r16, r12
     9c6:	4c 81       	ldd	r20, Y+4	; 0x04
     9c8:	5d 81       	ldd	r21, Y+5	; 0x05
     9ca:	6a 01       	movw	r12, r20
     9cc:	e1 2c       	mov	r14, r1
     9ce:	f1 2c       	mov	r15, r1
     9d0:	0c 15       	cp	r16, r12
     9d2:	1d 05       	cpc	r17, r13
     9d4:	2e 05       	cpc	r18, r14
     9d6:	3f 05       	cpc	r19, r15
     9d8:	50 f0       	brcs	.+20     	; 0x9ee <_ZN5Timer3runEv+0x56>
  {
    this->timer++;
     9da:	28 81       	ld	r18, Y
     9dc:	39 81       	ldd	r19, Y+1	; 0x01
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	39 83       	std	Y+1, r19	; 0x01
     9e4:	28 83       	st	Y, r18
    this->prevTime = curtTime;
     9e6:	6e 83       	std	Y+6, r22	; 0x06
     9e8:	7f 83       	std	Y+7, r23	; 0x07
     9ea:	88 87       	std	Y+8, r24	; 0x08
     9ec:	99 87       	std	Y+9, r25	; 0x09
  }
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	08 95       	ret

00000a00 <_ZN5Timer5resetEv>:
  return this->timer;
}

void Timer::setTimer(unsigned int timer)
{
  this->timer = timer;
     a00:	fc 01       	movw	r30, r24
     a02:	11 82       	std	Z+1, r1	; 0x01
     a04:	10 82       	st	Z, r1
     a06:	08 95       	ret

00000a08 <_ZN5Timer15readTimeSettingEi>:
{
  this->setTimer(0);
}

void Timer::readTimeSetting(int timePin)
{
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	ec 01       	movw	r28, r24
     a0e:	86 2f       	mov	r24, r22
  bool timePinState = digitalRead(timePin);
     a10:	0e 94 08 09 	call	0x1210	; 0x1210 <digitalRead>
  if (timePinState == HIGH)
     a14:	89 2b       	or	r24, r25
     a16:	19 f0       	breq	.+6      	; 0xa1e <_ZN5Timer15readTimeSettingEi+0x16>
  return this->threshold;
}

void Timer::setThreshold(unsigned int threshold)
{
  this->threshold = threshold;
     a18:	84 e1       	ldi	r24, 0x14	; 20
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <_ZN5Timer15readTimeSettingEi+0x1a>
     a1e:	8f e0       	ldi	r24, 0x0F	; 15
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	9b 83       	std	Y+3, r25	; 0x03
     a24:	8a 83       	std	Y+2, r24	; 0x02
  }
  else
  {
    this->setThreshold(WORKINGTIME2);
  }
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <_ZN5Timer10isOvertimeEv>:

bool Timer::isOvertime()
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
  this->run();
     a32:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN5Timer3runEv>
  return this->getTimer() >= this->getThreshold();
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	48 81       	ld	r20, Y
     a3a:	59 81       	ldd	r21, Y+1	; 0x01
     a3c:	2a 81       	ldd	r18, Y+2	; 0x02
     a3e:	3b 81       	ldd	r19, Y+3	; 0x03
     a40:	42 17       	cp	r20, r18
     a42:	53 07       	cpc	r21, r19
     a44:	08 f4       	brcc	.+2      	; 0xa48 <_ZN5Timer10isOvertimeEv+0x1c>
     a46:	80 e0       	ldi	r24, 0x00	; 0
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <_ZN5Timer18isThresholdChangedEi>:

bool Timer::isThresholdChanged(int timePin)
{
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
  this->timer = timer;
}

unsigned int Timer::getThreshold()
{
  return this->threshold;
     a58:	0a 81       	ldd	r16, Y+2	; 0x02
     a5a:	1b 81       	ldd	r17, Y+3	; 0x03
}

bool Timer::isThresholdChanged(int timePin)
{
  unsigned int old = this->getThreshold();
  this->readTimeSetting(timePin);
     a5c:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN5Timer15readTimeSettingEi>
  return old != this->getThreshold();
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	2a 81       	ldd	r18, Y+2	; 0x02
     a64:	3b 81       	ldd	r19, Y+3	; 0x03
     a66:	20 17       	cp	r18, r16
     a68:	31 07       	cpc	r19, r17
     a6a:	09 f4       	brne	.+2      	; 0xa6e <_ZN5Timer18isThresholdChangedEi+0x20>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	08 95       	ret

00000a78 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     a78:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     a7a:	91 8d       	ldd	r25, Z+25	; 0x19
     a7c:	22 8d       	ldd	r18, Z+26	; 0x1a
     a7e:	89 2f       	mov	r24, r25
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	80 5c       	subi	r24, 0xC0	; 192
     a84:	9f 4f       	sbci	r25, 0xFF	; 255
     a86:	82 1b       	sub	r24, r18
     a88:	91 09       	sbc	r25, r1
}
     a8a:	8f 73       	andi	r24, 0x3F	; 63
     a8c:	99 27       	eor	r25, r25
     a8e:	08 95       	ret

00000a90 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     a90:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     a92:	91 8d       	ldd	r25, Z+25	; 0x19
     a94:	82 8d       	ldd	r24, Z+26	; 0x1a
     a96:	98 17       	cp	r25, r24
     a98:	31 f0       	breq	.+12     	; 0xaa6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     a9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     a9c:	e8 0f       	add	r30, r24
     a9e:	f1 1d       	adc	r31, r1
     aa0:	85 8d       	ldd	r24, Z+29	; 0x1d
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     aaa:	08 95       	ret

00000aac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     aac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     aae:	91 8d       	ldd	r25, Z+25	; 0x19
     ab0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ab2:	98 17       	cp	r25, r24
     ab4:	61 f0       	breq	.+24     	; 0xace <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ab6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ab8:	df 01       	movw	r26, r30
     aba:	a8 0f       	add	r26, r24
     abc:	b1 1d       	adc	r27, r1
     abe:	5d 96       	adiw	r26, 0x1d	; 29
     ac0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     ac2:	92 8d       	ldd	r25, Z+26	; 0x1a
     ac4:	9f 5f       	subi	r25, 0xFF	; 255
     ac6:	9f 73       	andi	r25, 0x3F	; 63
     ac8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     ad2:	08 95       	ret

00000ad4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     ad4:	fc 01       	movw	r30, r24
     ad6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     ad8:	44 8d       	ldd	r20, Z+28	; 0x1c
     ada:	25 2f       	mov	r18, r21
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	84 2f       	mov	r24, r20
     ae0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     ae2:	82 1b       	sub	r24, r18
     ae4:	93 0b       	sbc	r25, r19
     ae6:	54 17       	cp	r21, r20
     ae8:	10 f0       	brcs	.+4      	; 0xaee <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     aea:	cf 96       	adiw	r24, 0x3f	; 63
     aec:	08 95       	ret
  return tail - head - 1;
     aee:	01 97       	sbiw	r24, 0x01	; 1
}
     af0:	08 95       	ret

00000af2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     af2:	85 ed       	ldi	r24, 0xD5	; 213
     af4:	96 e0       	ldi	r25, 0x06	; 6
     af6:	89 2b       	or	r24, r25
     af8:	49 f0       	breq	.+18     	; 0xb0c <_Z14serialEventRunv+0x1a>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	89 2b       	or	r24, r25
     b00:	29 f0       	breq	.+10     	; 0xb0c <_Z14serialEventRunv+0x1a>
     b02:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_Z17Serial0_availablev>
     b06:	81 11       	cpse	r24, r1
     b08:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     b0c:	08 95       	ret

00000b0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b0e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b10:	84 8d       	ldd	r24, Z+28	; 0x1c
     b12:	df 01       	movw	r26, r30
     b14:	a8 0f       	add	r26, r24
     b16:	b1 1d       	adc	r27, r1
     b18:	a3 5a       	subi	r26, 0xA3	; 163
     b1a:	bf 4f       	sbci	r27, 0xFF	; 255
     b1c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b1e:	84 8d       	ldd	r24, Z+28	; 0x1c
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	8f 73       	andi	r24, 0x3F	; 63
     b26:	99 27       	eor	r25, r25
     b28:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     b2a:	a6 89       	ldd	r26, Z+22	; 0x16
     b2c:	b7 89       	ldd	r27, Z+23	; 0x17
     b2e:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b30:	a0 89       	ldd	r26, Z+16	; 0x10
     b32:	b1 89       	ldd	r27, Z+17	; 0x11
     b34:	8c 91       	ld	r24, X
     b36:	83 70       	andi	r24, 0x03	; 3
     b38:	80 64       	ori	r24, 0x40	; 64
     b3a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     b3c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b3e:	84 8d       	ldd	r24, Z+28	; 0x1c
     b40:	98 13       	cpse	r25, r24
     b42:	06 c0       	rjmp	.+12     	; 0xb50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b44:	02 88       	ldd	r0, Z+18	; 0x12
     b46:	f3 89       	ldd	r31, Z+19	; 0x13
     b48:	e0 2d       	mov	r30, r0
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 7d       	andi	r24, 0xDF	; 223
     b4e:	80 83       	st	Z, r24
     b50:	08 95       	ret

00000b52 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	ec 01       	movw	r28, r24
  _written = true;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b64:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b66:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b68:	98 13       	cpse	r25, r24
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <_ZN14HardwareSerial5writeEh+0x24>
     b6c:	e8 89       	ldd	r30, Y+16	; 0x10
     b6e:	f9 89       	ldd	r31, Y+17	; 0x11
     b70:	80 81       	ld	r24, Z
     b72:	85 fd       	sbrc	r24, 5
     b74:	26 c0       	rjmp	.+76     	; 0xbc2 <_ZN14HardwareSerial5writeEh+0x70>
     b76:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b78:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	0f 73       	andi	r16, 0x3F	; 63
     b82:	11 27       	eor	r17, r17
     b84:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b86:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b88:	e8 12       	cpse	r14, r24
     b8a:	0c c0       	rjmp	.+24     	; 0xba4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	07 fc       	sbrc	r0, 7
     b90:	fa cf       	rjmp	.-12     	; 0xb86 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b92:	e8 89       	ldd	r30, Y+16	; 0x10
     b94:	f9 89       	ldd	r31, Y+17	; 0x11
     b96:	80 81       	ld	r24, Z
     b98:	85 ff       	sbrs	r24, 5
     b9a:	f5 cf       	rjmp	.-22     	; 0xb86 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ba2:	f1 cf       	rjmp	.-30     	; 0xb86 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 0f       	add	r30, r24
     baa:	f1 1d       	adc	r31, r1
     bac:	e3 5a       	subi	r30, 0xA3	; 163
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bb2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bb4:	f8 94       	cli
    _tx_buffer_head = i;
     bb6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     bb8:	ea 89       	ldd	r30, Y+18	; 0x12
     bba:	fb 89       	ldd	r31, Y+19	; 0x13
     bbc:	80 81       	ld	r24, Z
     bbe:	80 62       	ori	r24, 0x20	; 32
     bc0:	0a c0       	rjmp	.+20     	; 0xbd6 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bc2:	9f b7       	in	r25, 0x3f	; 63
     bc4:	f8 94       	cli
      *_udr = c;
     bc6:	ee 89       	ldd	r30, Y+22	; 0x16
     bc8:	ff 89       	ldd	r31, Y+23	; 0x17
     bca:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     bcc:	e8 89       	ldd	r30, Y+16	; 0x10
     bce:	f9 89       	ldd	r31, Y+17	; 0x11
     bd0:	80 81       	ld	r24, Z
     bd2:	83 70       	andi	r24, 0x03	; 3
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bd8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     bf2:	88 8d       	ldd	r24, Y+24	; 0x18
     bf4:	88 23       	and	r24, r24
     bf6:	c9 f0       	breq	.+50     	; 0xc2a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     bf8:	ea 89       	ldd	r30, Y+18	; 0x12
     bfa:	fb 89       	ldd	r31, Y+19	; 0x13
     bfc:	80 81       	ld	r24, Z
     bfe:	85 fd       	sbrc	r24, 5
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <_ZN14HardwareSerial5flushEv+0x20>
     c02:	a8 89       	ldd	r26, Y+16	; 0x10
     c04:	b9 89       	ldd	r27, Y+17	; 0x11
     c06:	8c 91       	ld	r24, X
     c08:	86 fd       	sbrc	r24, 6
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	07 fc       	sbrc	r0, 7
     c10:	f5 cf       	rjmp	.-22     	; 0xbfc <_ZN14HardwareSerial5flushEv+0x10>
     c12:	80 81       	ld	r24, Z
     c14:	85 ff       	sbrs	r24, 5
     c16:	f2 cf       	rjmp	.-28     	; 0xbfc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c18:	a8 89       	ldd	r26, Y+16	; 0x10
     c1a:	b9 89       	ldd	r27, Y+17	; 0x11
     c1c:	8c 91       	ld	r24, X
     c1e:	85 ff       	sbrs	r24, 5
     c20:	ed cf       	rjmp	.-38     	; 0xbfc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c22:	ce 01       	movw	r24, r28
     c24:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c28:	e7 cf       	rjmp	.-50     	; 0xbf8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
     c40:	6a 01       	movw	r12, r20
     c42:	7b 01       	movw	r14, r22
     c44:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c46:	e8 89       	ldd	r30, Y+16	; 0x10
     c48:	f9 89       	ldd	r31, Y+17	; 0x11
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c4e:	41 15       	cp	r20, r1
     c50:	51 4e       	sbci	r21, 0xE1	; 225
     c52:	61 05       	cpc	r22, r1
     c54:	71 05       	cpc	r23, r1
     c56:	b1 f0       	breq	.+44     	; 0xc84 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	79 e0       	ldi	r23, 0x09	; 9
     c5c:	8d e3       	ldi	r24, 0x3D	; 61
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a7 01       	movw	r20, r14
     c62:	96 01       	movw	r18, r12
     c64:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodsi4>
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	a1 09       	sbc	r26, r1
     c70:	b1 09       	sbc	r27, r1
     c72:	b6 95       	lsr	r27
     c74:	a7 95       	ror	r26
     c76:	97 95       	ror	r25
     c78:	87 95       	ror	r24
     c7a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c7c:	21 15       	cp	r18, r1
     c7e:	80 e1       	ldi	r24, 0x10	; 16
     c80:	38 07       	cpc	r19, r24
     c82:	a8 f0       	brcs	.+42     	; 0xcae <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     c84:	e8 89       	ldd	r30, Y+16	; 0x10
     c86:	f9 89       	ldd	r31, Y+17	; 0x11
     c88:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c8a:	60 e8       	ldi	r22, 0x80	; 128
     c8c:	74 e8       	ldi	r23, 0x84	; 132
     c8e:	8e e1       	ldi	r24, 0x1E	; 30
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	a7 01       	movw	r20, r14
     c94:	96 01       	movw	r18, r12
     c96:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodsi4>
     c9a:	da 01       	movw	r26, r20
     c9c:	c9 01       	movw	r24, r18
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	b6 95       	lsr	r27
     ca6:	a7 95       	ror	r26
     ca8:	97 95       	ror	r25
     caa:	87 95       	ror	r24
     cac:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cae:	ec 85       	ldd	r30, Y+12	; 0x0c
     cb0:	fd 85       	ldd	r31, Y+13	; 0x0d
     cb2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     cb4:	ee 85       	ldd	r30, Y+14	; 0x0e
     cb6:	ff 85       	ldd	r31, Y+15	; 0x0f
     cb8:	20 83       	st	Z, r18

  _written = false;
     cba:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     cbc:	ec 89       	ldd	r30, Y+20	; 0x14
     cbe:	fd 89       	ldd	r31, Y+21	; 0x15
     cc0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     cc2:	ea 89       	ldd	r30, Y+18	; 0x12
     cc4:	fb 89       	ldd	r31, Y+19	; 0x13
     cc6:	80 81       	ld	r24, Z
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ccc:	ea 89       	ldd	r30, Y+18	; 0x12
     cce:	fb 89       	ldd	r31, Y+19	; 0x13
     cd0:	80 81       	ld	r24, Z
     cd2:	88 60       	ori	r24, 0x08	; 8
     cd4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     cd6:	ea 89       	ldd	r30, Y+18	; 0x12
     cd8:	fb 89       	ldd	r31, Y+19	; 0x13
     cda:	80 81       	ld	r24, Z
     cdc:	80 68       	ori	r24, 0x80	; 128
     cde:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ce0:	ea 89       	ldd	r30, Y+18	; 0x12
     ce2:	fb 89       	ldd	r31, Y+19	; 0x13
     ce4:	80 81       	ld	r24, Z
     ce6:	8f 7d       	andi	r24, 0xDF	; 223
     ce8:	80 83       	st	Z, r24
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	08 95       	ret

00000cfa <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	2f 93       	push	r18
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d0e:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x10>
     d12:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x11>
     d16:	80 81       	ld	r24, Z
     d18:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <Serial+0x16>
     d1c:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <Serial+0x17>
     d20:	82 fd       	sbrc	r24, 2
     d22:	12 c0       	rjmp	.+36     	; 0xd48 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d24:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d26:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <Serial+0x19>
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d2e:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <Serial+0x1a>
     d32:	82 17       	cp	r24, r18
     d34:	51 f0       	breq	.+20     	; 0xd4a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     d36:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <Serial+0x19>
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	e6 56       	subi	r30, 0x66	; 102
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d42:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Serial+0x19>
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d48:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d80:	8a e9       	ldi	r24, 0x9A	; 154
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     daa:	8a e9       	ldi	r24, 0x9A	; 154
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN14HardwareSerial9availableEv>
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	89 2b       	or	r24, r25
     db6:	09 f4       	brne	.+2      	; 0xdba <_Z17Serial0_availablev+0x10>
     db8:	20 e0       	ldi	r18, 0x00	; 0
}
     dba:	82 2f       	mov	r24, r18
     dbc:	08 95       	ret

00000dbe <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dbe:	ea e9       	ldi	r30, 0x9A	; 154
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	13 82       	std	Z+3, r1	; 0x03
     dc4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     dc6:	88 ee       	ldi	r24, 0xE8	; 232
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	84 83       	std	Z+4, r24	; 0x04
     dd0:	95 83       	std	Z+5, r25	; 0x05
     dd2:	a6 83       	std	Z+6, r26	; 0x06
     dd4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     dd6:	8a e6       	ldi	r24, 0x6A	; 106
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	85 ec       	ldi	r24, 0xC5	; 197
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	95 87       	std	Z+13, r25	; 0x0d
     de4:	84 87       	std	Z+12, r24	; 0x0c
     de6:	84 ec       	ldi	r24, 0xC4	; 196
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	97 87       	std	Z+15, r25	; 0x0f
     dec:	86 87       	std	Z+14, r24	; 0x0e
     dee:	80 ec       	ldi	r24, 0xC0	; 192
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	91 8b       	std	Z+17, r25	; 0x11
     df4:	80 8b       	std	Z+16, r24	; 0x10
     df6:	81 ec       	ldi	r24, 0xC1	; 193
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	93 8b       	std	Z+19, r25	; 0x13
     dfc:	82 8b       	std	Z+18, r24	; 0x12
     dfe:	82 ec       	ldi	r24, 0xC2	; 194
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	95 8b       	std	Z+21, r25	; 0x15
     e04:	84 8b       	std	Z+20, r24	; 0x14
     e06:	86 ec       	ldi	r24, 0xC6	; 198
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	97 8b       	std	Z+23, r25	; 0x17
     e0c:	86 8b       	std	Z+22, r24	; 0x16
     e0e:	11 8e       	std	Z+25, r1	; 0x19
     e10:	12 8e       	std	Z+26, r1	; 0x1a
     e12:	13 8e       	std	Z+27, r1	; 0x1b
     e14:	14 8e       	std	Z+28, r1	; 0x1c
     e16:	08 95       	ret

00000e18 <initVariant>:
     e18:	08 95       	ret

00000e1a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e1a:	0e 94 39 08 	call	0x1072	; 0x1072 <init>

	initVariant();
     e1e:	0e 94 0c 07 	call	0xe18	; 0xe18 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e22:	0e 94 b6 02 	call	0x56c	; 0x56c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e26:	c9 e7       	ldi	r28, 0x79	; 121
     e28:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e2a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <loop>
		if (serialEventRun) serialEventRun();
     e2e:	20 97       	sbiw	r28, 0x00	; 0
     e30:	e1 f3       	breq	.-8      	; 0xe2a <main+0x10>
     e32:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_Z14serialEventRunv>
     e36:	f9 cf       	rjmp	.-14     	; 0xe2a <main+0x10>

00000e38 <_Znwj>:
     e38:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <malloc>

00000e3c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	6c 01       	movw	r12, r24
     e4e:	7a 01       	movw	r14, r20
     e50:	8b 01       	movw	r16, r22
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	ce 15       	cp	r28, r14
     e58:	df 05       	cpc	r29, r15
     e5a:	81 f0       	breq	.+32     	; 0xe7c <_ZN5Print5writeEPKhj+0x40>
     e5c:	d8 01       	movw	r26, r16
     e5e:	6d 91       	ld	r22, X+
     e60:	8d 01       	movw	r16, r26
     e62:	d6 01       	movw	r26, r12
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	01 90       	ld	r0, Z+
     e6a:	f0 81       	ld	r31, Z
     e6c:	e0 2d       	mov	r30, r0
     e6e:	c6 01       	movw	r24, r12
     e70:	09 95       	icall
     e72:	89 2b       	or	r24, r25
     e74:	11 f0       	breq	.+4      	; 0xe7a <_ZN5Print5writeEPKhj+0x3e>
     e76:	21 96       	adiw	r28, 0x01	; 1
     e78:	ee cf       	rjmp	.-36     	; 0xe56 <_ZN5Print5writeEPKhj+0x1a>
     e7a:	7e 01       	movw	r14, r28
     e7c:	c7 01       	movw	r24, r14
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	08 95       	ret

00000e90 <_ZN5Print5writeEPKc>:
     e90:	61 15       	cp	r22, r1
     e92:	71 05       	cpc	r23, r1
     e94:	79 f0       	breq	.+30     	; 0xeb4 <_ZN5Print5writeEPKc+0x24>
     e96:	fb 01       	movw	r30, r22
     e98:	01 90       	ld	r0, Z+
     e9a:	00 20       	and	r0, r0
     e9c:	e9 f7       	brne	.-6      	; 0xe98 <_ZN5Print5writeEPKc+0x8>
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	af 01       	movw	r20, r30
     ea2:	46 1b       	sub	r20, r22
     ea4:	57 0b       	sbc	r21, r23
     ea6:	dc 01       	movw	r26, r24
     ea8:	ed 91       	ld	r30, X+
     eaa:	fc 91       	ld	r31, X
     eac:	02 80       	ldd	r0, Z+2	; 0x02
     eae:	f3 81       	ldd	r31, Z+3	; 0x03
     eb0:	e0 2d       	mov	r30, r0
     eb2:	09 94       	ijmp
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	08 95       	ret

00000eba <_ZN5Print5printEPKc>:
     eba:	0c 94 48 07 	jmp	0xe90	; 0xe90 <_ZN5Print5writeEPKc>

00000ebe <_ZN5Print7printlnEv>:
     ebe:	68 e7       	ldi	r22, 0x78	; 120
     ec0:	71 e0       	ldi	r23, 0x01	; 1
     ec2:	0c 94 48 07 	jmp	0xe90	; 0xe90 <_ZN5Print5writeEPKc>

00000ec6 <_ZN5Print7printlnEPKc>:
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
     ed0:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN5Print5writeEPKc>
     ed4:	8c 01       	movw	r16, r24
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEv>
     edc:	80 0f       	add	r24, r16
     ede:	91 1f       	adc	r25, r17
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	08 95       	ret

00000eea <_ZN5Print11printNumberEmh>:
     eea:	8f 92       	push	r8
     eec:	9f 92       	push	r9
     eee:	af 92       	push	r10
     ef0:	bf 92       	push	r11
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	a1 97       	sbiw	r28, 0x21	; 33
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	7c 01       	movw	r14, r24
     f10:	fa 01       	movw	r30, r20
     f12:	cb 01       	movw	r24, r22
     f14:	19 a2       	std	Y+33, r1	; 0x21
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	08 f4       	brcc	.+2      	; 0xf1c <_ZN5Print11printNumberEmh+0x32>
     f1a:	2a e0       	ldi	r18, 0x0A	; 10
     f1c:	8e 01       	movw	r16, r28
     f1e:	0f 5d       	subi	r16, 0xDF	; 223
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	82 2e       	mov	r8, r18
     f24:	91 2c       	mov	r9, r1
     f26:	a1 2c       	mov	r10, r1
     f28:	b1 2c       	mov	r11, r1
     f2a:	bf 01       	movw	r22, r30
     f2c:	a5 01       	movw	r20, r10
     f2e:	94 01       	movw	r18, r8
     f30:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodsi4>
     f34:	f9 01       	movw	r30, r18
     f36:	ca 01       	movw	r24, r20
     f38:	01 50       	subi	r16, 0x01	; 1
     f3a:	11 09       	sbc	r17, r1
     f3c:	6a 30       	cpi	r22, 0x0A	; 10
     f3e:	10 f4       	brcc	.+4      	; 0xf44 <_ZN5Print11printNumberEmh+0x5a>
     f40:	60 5d       	subi	r22, 0xD0	; 208
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <_ZN5Print11printNumberEmh+0x5c>
     f44:	69 5c       	subi	r22, 0xC9	; 201
     f46:	d8 01       	movw	r26, r16
     f48:	6c 93       	st	X, r22
     f4a:	23 2b       	or	r18, r19
     f4c:	24 2b       	or	r18, r20
     f4e:	25 2b       	or	r18, r21
     f50:	61 f7       	brne	.-40     	; 0xf2a <_ZN5Print11printNumberEmh+0x40>
     f52:	b8 01       	movw	r22, r16
     f54:	c7 01       	movw	r24, r14
     f56:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN5Print5writeEPKc>
     f5a:	a1 96       	adiw	r28, 0x21	; 33
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	08 95       	ret

00000f7c <_ZN5Print5printEmi>:
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	41 f4       	brne	.+16     	; 0xf92 <_ZN5Print5printEmi+0x16>
     f82:	dc 01       	movw	r26, r24
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	01 90       	ld	r0, Z+
     f8a:	f0 81       	ld	r31, Z
     f8c:	e0 2d       	mov	r30, r0
     f8e:	64 2f       	mov	r22, r20
     f90:	09 94       	ijmp
     f92:	0c 94 75 07 	jmp	0xeea	; 0xeea <_ZN5Print11printNumberEmh>

00000f96 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     f96:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     f98:	ab 01       	movw	r20, r22
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <_ZN5Print5printEmi>

00000fa2 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     fac:	0e 94 cb 07 	call	0xf96	; 0xf96 <_ZN5Print5printEji>
     fb0:	8c 01       	movw	r16, r24
  n += println();
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEv>
  return n;
}
     fb8:	80 0f       	add	r24, r16
     fba:	91 1f       	adc	r25, r17
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <timer0_millis>
     fe0:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <timer0_millis+0x1>
     fe4:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <timer0_millis+0x2>
     fe8:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <timer0_millis+0x3>
     fec:	30 91 37 02 	lds	r19, 0x0237	; 0x800237 <timer0_fract>
     ff0:	23 e0       	ldi	r18, 0x03	; 3
     ff2:	23 0f       	add	r18, r19
     ff4:	2d 37       	cpi	r18, 0x7D	; 125
     ff6:	20 f4       	brcc	.+8      	; 0x1000 <__vector_16+0x3a>
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	a1 1d       	adc	r26, r1
     ffc:	b1 1d       	adc	r27, r1
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <__vector_16+0x44>
    1000:	26 e8       	ldi	r18, 0x86	; 134
    1002:	23 0f       	add	r18, r19
    1004:	02 96       	adiw	r24, 0x02	; 2
    1006:	a1 1d       	adc	r26, r1
    1008:	b1 1d       	adc	r27, r1
    100a:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <timer0_fract>
    100e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <timer0_millis>
    1012:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <timer0_millis+0x1>
    1016:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <timer0_millis+0x2>
    101a:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <timer0_millis+0x3>
    101e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <timer0_overflow_count>
    1022:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <timer0_overflow_count+0x1>
    1026:	a0 91 3e 02 	lds	r26, 0x023E	; 0x80023e <timer0_overflow_count+0x2>
    102a:	b0 91 3f 02 	lds	r27, 0x023F	; 0x80023f <timer0_overflow_count+0x3>
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	a1 1d       	adc	r26, r1
    1032:	b1 1d       	adc	r27, r1
    1034:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <timer0_overflow_count>
    1038:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <timer0_overflow_count+0x1>
    103c:	a0 93 3e 02 	sts	0x023E, r26	; 0x80023e <timer0_overflow_count+0x2>
    1040:	b0 93 3f 02 	sts	0x023F, r27	; 0x80023f <timer0_overflow_count+0x3>
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <millis>:
    105a:	2f b7       	in	r18, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <timer0_millis>
    1062:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <timer0_millis+0x1>
    1066:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <timer0_millis+0x2>
    106a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <timer0_millis+0x3>
    106e:	2f bf       	out	0x3f, r18	; 63
    1070:	08 95       	ret

00001072 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1072:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1074:	84 b5       	in	r24, 0x24	; 36
    1076:	82 60       	ori	r24, 0x02	; 2
    1078:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    107a:	84 b5       	in	r24, 0x24	; 36
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1080:	85 b5       	in	r24, 0x25	; 37
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1086:	85 b5       	in	r24, 0x25	; 37
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    108c:	ee e6       	ldi	r30, 0x6E	; 110
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1096:	e1 e8       	ldi	r30, 0x81	; 129
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    109c:	80 81       	ld	r24, Z
    109e:	82 60       	ori	r24, 0x02	; 2
    10a0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    10a2:	80 81       	ld	r24, Z
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10a8:	e0 e8       	ldi	r30, 0x80	; 128
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10b2:	e1 eb       	ldi	r30, 0xB1	; 177
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	84 60       	ori	r24, 0x04	; 4
    10ba:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10bc:	e0 eb       	ldi	r30, 0xB0	; 176
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10c6:	ea e7       	ldi	r30, 0x7A	; 122
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	84 60       	ori	r24, 0x04	; 4
    10ce:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10d0:	80 81       	ld	r24, Z
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10dc:	80 81       	ld	r24, Z
    10de:	80 68       	ori	r24, 0x80	; 128
    10e0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10e2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    10e6:	08 95       	ret

000010e8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	81 f0       	breq	.+32     	; 0x110c <turnOffPWM+0x24>
    10ec:	28 f4       	brcc	.+10     	; 0x10f8 <turnOffPWM+0x10>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	99 f0       	breq	.+38     	; 0x1118 <turnOffPWM+0x30>
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	a1 f0       	breq	.+40     	; 0x111e <turnOffPWM+0x36>
    10f6:	08 95       	ret
    10f8:	87 30       	cpi	r24, 0x07	; 7
    10fa:	a9 f0       	breq	.+42     	; 0x1126 <turnOffPWM+0x3e>
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	b9 f0       	breq	.+46     	; 0x112e <turnOffPWM+0x46>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	d1 f4       	brne	.+52     	; 0x1138 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1104:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    110c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1110:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1112:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1116:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1118:	84 b5       	in	r24, 0x24	; 36
    111a:	8f 77       	andi	r24, 0x7F	; 127
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    111e:	84 b5       	in	r24, 0x24	; 36
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	84 bd       	out	0x24, r24	; 36
    1124:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1126:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    112a:	8f 77       	andi	r24, 0x7F	; 127
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    112e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1132:	8f 7d       	andi	r24, 0xDF	; 223
    1134:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1138:	08 95       	ret

0000113a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	fc 01       	movw	r30, r24
    1142:	e4 58       	subi	r30, 0x84	; 132
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1148:	fc 01       	movw	r30, r24
    114a:	e0 57       	subi	r30, 0x70	; 112
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1150:	88 23       	and	r24, r24
    1152:	61 f1       	breq	.+88     	; 0x11ac <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	fc 01       	movw	r30, r24
    115c:	e8 54       	subi	r30, 0x48	; 72
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	c5 91       	lpm	r28, Z+
    1162:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1164:	fc 01       	movw	r30, r24
    1166:	e2 55       	subi	r30, 0x52	; 82
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	a5 91       	lpm	r26, Z+
    116c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    116e:	61 11       	cpse	r22, r1
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1172:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1174:	f8 94       	cli
		*reg &= ~bit;
    1176:	88 81       	ld	r24, Y
    1178:	20 95       	com	r18
    117a:	82 23       	and	r24, r18
    117c:	88 83       	st	Y, r24
		*out &= ~bit;
    117e:	ec 91       	ld	r30, X
    1180:	2e 23       	and	r18, r30
    1182:	0b c0       	rjmp	.+22     	; 0x119a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1184:	62 30       	cpi	r22, 0x02	; 2
    1186:	61 f4       	brne	.+24     	; 0x11a0 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1188:	9f b7       	in	r25, 0x3f	; 63
                cli();
    118a:	f8 94       	cli
		*reg &= ~bit;
    118c:	88 81       	ld	r24, Y
    118e:	32 2f       	mov	r19, r18
    1190:	30 95       	com	r19
    1192:	83 23       	and	r24, r19
    1194:	88 83       	st	Y, r24
		*out |= bit;
    1196:	ec 91       	ld	r30, X
    1198:	2e 2b       	or	r18, r30
    119a:	2c 93       	st	X, r18
		SREG = oldSREG;
    119c:	9f bf       	out	0x3f, r25	; 63
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    11a0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    11a2:	f8 94       	cli
		*reg |= bit;
    11a4:	e8 81       	ld	r30, Y
    11a6:	2e 2b       	or	r18, r30
    11a8:	28 83       	st	Y, r18
		SREG = oldSREG;
    11aa:	8f bf       	out	0x3f, r24	; 63
	}
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	f9 01       	movw	r30, r18
    11be:	e8 59       	subi	r30, 0x98	; 152
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11c4:	f9 01       	movw	r30, r18
    11c6:	e4 58       	subi	r30, 0x84	; 132
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11cc:	f9 01       	movw	r30, r18
    11ce:	e0 57       	subi	r30, 0x70	; 112
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11d4:	cc 23       	and	r28, r28
    11d6:	c1 f0       	breq	.+48     	; 0x1208 <digitalWrite+0x56>
    11d8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11da:	81 11       	cpse	r24, r1
    11dc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <turnOffPWM>

	out = portOutputRegister(port);
    11e0:	ec 2f       	mov	r30, r28
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	e2 55       	subi	r30, 0x52	; 82
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	a5 91       	lpm	r26, Z+
    11ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11f0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11f2:	f8 94       	cli

	if (val == LOW) {
    11f4:	11 11       	cpse	r17, r1
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <digitalWrite+0x4e>
		*out &= ~bit;
    11f8:	8c 91       	ld	r24, X
    11fa:	d0 95       	com	r29
    11fc:	d8 23       	and	r29, r24
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1200:	ec 91       	ld	r30, X
    1202:	de 2b       	or	r29, r30
    1204:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1206:	9f bf       	out	0x3f, r25	; 63
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	08 95       	ret

00001210 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f9 01       	movw	r30, r18
    121a:	e8 59       	subi	r30, 0x98	; 152
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1220:	f9 01       	movw	r30, r18
    1222:	e4 58       	subi	r30, 0x84	; 132
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1228:	f9 01       	movw	r30, r18
    122a:	e0 57       	subi	r30, 0x70	; 112
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1230:	cc 23       	and	r28, r28
    1232:	91 f0       	breq	.+36     	; 0x1258 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1234:	81 11       	cpse	r24, r1
    1236:	0e 94 74 08 	call	0x10e8	; 0x10e8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    123a:	ec 2f       	mov	r30, r28
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	ec 55       	subi	r30, 0x5C	; 92
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	a5 91       	lpm	r26, Z+
    1248:	b4 91       	lpm	r27, Z
    124a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    124c:	ed 23       	and	r30, r29
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	21 f4       	brne	.+8      	; 0x125c <digitalRead+0x4c>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <digitalRead+0x4c>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	08 95       	ret

00001262 <__udivmodsi4>:
    1262:	a1 e2       	ldi	r26, 0x21	; 33
    1264:	1a 2e       	mov	r1, r26
    1266:	aa 1b       	sub	r26, r26
    1268:	bb 1b       	sub	r27, r27
    126a:	fd 01       	movw	r30, r26
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <__udivmodsi4_ep>

0000126e <__udivmodsi4_loop>:
    126e:	aa 1f       	adc	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	ee 1f       	adc	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	a2 17       	cp	r26, r18
    1278:	b3 07       	cpc	r27, r19
    127a:	e4 07       	cpc	r30, r20
    127c:	f5 07       	cpc	r31, r21
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__udivmodsi4_ep>
    1280:	a2 1b       	sub	r26, r18
    1282:	b3 0b       	sbc	r27, r19
    1284:	e4 0b       	sbc	r30, r20
    1286:	f5 0b       	sbc	r31, r21

00001288 <__udivmodsi4_ep>:
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	1a 94       	dec	r1
    1292:	69 f7       	brne	.-38     	; 0x126e <__udivmodsi4_loop>
    1294:	60 95       	com	r22
    1296:	70 95       	com	r23
    1298:	80 95       	com	r24
    129a:	90 95       	com	r25
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
    12a0:	bd 01       	movw	r22, r26
    12a2:	cf 01       	movw	r24, r30
    12a4:	08 95       	ret

000012a6 <__tablejump2__>:
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	05 90       	lpm	r0, Z+
    12ac:	f4 91       	lpm	r31, Z
    12ae:	e0 2d       	mov	r30, r0
    12b0:	09 94       	ijmp

000012b2 <malloc>:
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	91 05       	cpc	r25, r1
    12be:	10 f4       	brcc	.+4      	; 0x12c4 <malloc+0x12>
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__flp>
    12c8:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__flp+0x1>
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	30 97       	sbiw	r30, 0x00	; 0
    12d6:	19 f1       	breq	.+70     	; 0x131e <malloc+0x6c>
    12d8:	40 81       	ld	r20, Z
    12da:	51 81       	ldd	r21, Z+1	; 0x01
    12dc:	02 81       	ldd	r16, Z+2	; 0x02
    12de:	13 81       	ldd	r17, Z+3	; 0x03
    12e0:	48 17       	cp	r20, r24
    12e2:	59 07       	cpc	r21, r25
    12e4:	c8 f0       	brcs	.+50     	; 0x1318 <malloc+0x66>
    12e6:	84 17       	cp	r24, r20
    12e8:	95 07       	cpc	r25, r21
    12ea:	69 f4       	brne	.+26     	; 0x1306 <malloc+0x54>
    12ec:	10 97       	sbiw	r26, 0x00	; 0
    12ee:	31 f0       	breq	.+12     	; 0x12fc <malloc+0x4a>
    12f0:	12 96       	adiw	r26, 0x02	; 2
    12f2:	0c 93       	st	X, r16
    12f4:	12 97       	sbiw	r26, 0x02	; 2
    12f6:	13 96       	adiw	r26, 0x03	; 3
    12f8:	1c 93       	st	X, r17
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <malloc+0x98>
    12fc:	00 93 42 02 	sts	0x0242, r16	; 0x800242 <__flp>
    1300:	10 93 43 02 	sts	0x0243, r17	; 0x800243 <__flp+0x1>
    1304:	22 c0       	rjmp	.+68     	; 0x134a <malloc+0x98>
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	19 f0       	breq	.+6      	; 0x1312 <malloc+0x60>
    130c:	42 17       	cp	r20, r18
    130e:	53 07       	cpc	r21, r19
    1310:	18 f4       	brcc	.+6      	; 0x1318 <malloc+0x66>
    1312:	9a 01       	movw	r18, r20
    1314:	bd 01       	movw	r22, r26
    1316:	ef 01       	movw	r28, r30
    1318:	df 01       	movw	r26, r30
    131a:	f8 01       	movw	r30, r16
    131c:	db cf       	rjmp	.-74     	; 0x12d4 <malloc+0x22>
    131e:	21 15       	cp	r18, r1
    1320:	31 05       	cpc	r19, r1
    1322:	f9 f0       	breq	.+62     	; 0x1362 <malloc+0xb0>
    1324:	28 1b       	sub	r18, r24
    1326:	39 0b       	sbc	r19, r25
    1328:	24 30       	cpi	r18, 0x04	; 4
    132a:	31 05       	cpc	r19, r1
    132c:	80 f4       	brcc	.+32     	; 0x134e <malloc+0x9c>
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	61 15       	cp	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	21 f0       	breq	.+8      	; 0x1340 <malloc+0x8e>
    1338:	fb 01       	movw	r30, r22
    133a:	93 83       	std	Z+3, r25	; 0x03
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <malloc+0x96>
    1340:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__flp+0x1>
    1344:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__flp>
    1348:	fe 01       	movw	r30, r28
    134a:	32 96       	adiw	r30, 0x02	; 2
    134c:	44 c0       	rjmp	.+136    	; 0x13d6 <malloc+0x124>
    134e:	fe 01       	movw	r30, r28
    1350:	e2 0f       	add	r30, r18
    1352:	f3 1f       	adc	r31, r19
    1354:	81 93       	st	Z+, r24
    1356:	91 93       	st	Z+, r25
    1358:	22 50       	subi	r18, 0x02	; 2
    135a:	31 09       	sbc	r19, r1
    135c:	39 83       	std	Y+1, r19	; 0x01
    135e:	28 83       	st	Y, r18
    1360:	3a c0       	rjmp	.+116    	; 0x13d6 <malloc+0x124>
    1362:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
    1366:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
    136a:	23 2b       	or	r18, r19
    136c:	41 f4       	brne	.+16     	; 0x137e <malloc+0xcc>
    136e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1372:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1376:	30 93 41 02 	sts	0x0241, r19	; 0x800241 <__brkval+0x1>
    137a:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <__brkval>
    137e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1382:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	41 f4       	brne	.+16     	; 0x139c <malloc+0xea>
    138c:	2d b7       	in	r18, 0x3d	; 61
    138e:	3e b7       	in	r19, 0x3e	; 62
    1390:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1394:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1398:	24 1b       	sub	r18, r20
    139a:	35 0b       	sbc	r19, r21
    139c:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__brkval>
    13a0:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <__brkval+0x1>
    13a4:	e2 17       	cp	r30, r18
    13a6:	f3 07       	cpc	r31, r19
    13a8:	a0 f4       	brcc	.+40     	; 0x13d2 <malloc+0x120>
    13aa:	2e 1b       	sub	r18, r30
    13ac:	3f 0b       	sbc	r19, r31
    13ae:	28 17       	cp	r18, r24
    13b0:	39 07       	cpc	r19, r25
    13b2:	78 f0       	brcs	.+30     	; 0x13d2 <malloc+0x120>
    13b4:	ac 01       	movw	r20, r24
    13b6:	4e 5f       	subi	r20, 0xFE	; 254
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	24 17       	cp	r18, r20
    13bc:	35 07       	cpc	r19, r21
    13be:	48 f0       	brcs	.+18     	; 0x13d2 <malloc+0x120>
    13c0:	4e 0f       	add	r20, r30
    13c2:	5f 1f       	adc	r21, r31
    13c4:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <__brkval+0x1>
    13c8:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <__brkval>
    13cc:	81 93       	st	Z+, r24
    13ce:	91 93       	st	Z+, r25
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <malloc+0x124>
    13d2:	e0 e0       	ldi	r30, 0x00	; 0
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	cf 01       	movw	r24, r30
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <free>:
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	09 f4       	brne	.+2      	; 0x13ec <free+0xa>
    13ea:	81 c0       	rjmp	.+258    	; 0x14ee <free+0x10c>
    13ec:	fc 01       	movw	r30, r24
    13ee:	32 97       	sbiw	r30, 0x02	; 2
    13f0:	13 82       	std	Z+3, r1	; 0x03
    13f2:	12 82       	std	Z+2, r1	; 0x02
    13f4:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <__flp>
    13f8:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <__flp+0x1>
    13fc:	10 97       	sbiw	r26, 0x00	; 0
    13fe:	81 f4       	brne	.+32     	; 0x1420 <free+0x3e>
    1400:	20 81       	ld	r18, Z
    1402:	31 81       	ldd	r19, Z+1	; 0x01
    1404:	82 0f       	add	r24, r18
    1406:	93 1f       	adc	r25, r19
    1408:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
    140c:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
    1410:	28 17       	cp	r18, r24
    1412:	39 07       	cpc	r19, r25
    1414:	51 f5       	brne	.+84     	; 0x146a <free+0x88>
    1416:	f0 93 41 02 	sts	0x0241, r31	; 0x800241 <__brkval+0x1>
    141a:	e0 93 40 02 	sts	0x0240, r30	; 0x800240 <__brkval>
    141e:	67 c0       	rjmp	.+206    	; 0x14ee <free+0x10c>
    1420:	ed 01       	movw	r28, r26
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ce 17       	cp	r28, r30
    1428:	df 07       	cpc	r29, r31
    142a:	40 f4       	brcc	.+16     	; 0x143c <free+0x5a>
    142c:	4a 81       	ldd	r20, Y+2	; 0x02
    142e:	5b 81       	ldd	r21, Y+3	; 0x03
    1430:	9e 01       	movw	r18, r28
    1432:	41 15       	cp	r20, r1
    1434:	51 05       	cpc	r21, r1
    1436:	f1 f0       	breq	.+60     	; 0x1474 <free+0x92>
    1438:	ea 01       	movw	r28, r20
    143a:	f5 cf       	rjmp	.-22     	; 0x1426 <free+0x44>
    143c:	d3 83       	std	Z+3, r29	; 0x03
    143e:	c2 83       	std	Z+2, r28	; 0x02
    1440:	40 81       	ld	r20, Z
    1442:	51 81       	ldd	r21, Z+1	; 0x01
    1444:	84 0f       	add	r24, r20
    1446:	95 1f       	adc	r25, r21
    1448:	c8 17       	cp	r28, r24
    144a:	d9 07       	cpc	r29, r25
    144c:	59 f4       	brne	.+22     	; 0x1464 <free+0x82>
    144e:	88 81       	ld	r24, Y
    1450:	99 81       	ldd	r25, Y+1	; 0x01
    1452:	84 0f       	add	r24, r20
    1454:	95 1f       	adc	r25, r21
    1456:	02 96       	adiw	r24, 0x02	; 2
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	9b 81       	ldd	r25, Y+3	; 0x03
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	21 15       	cp	r18, r1
    1466:	31 05       	cpc	r19, r1
    1468:	29 f4       	brne	.+10     	; 0x1474 <free+0x92>
    146a:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__flp+0x1>
    146e:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__flp>
    1472:	3d c0       	rjmp	.+122    	; 0x14ee <free+0x10c>
    1474:	e9 01       	movw	r28, r18
    1476:	fb 83       	std	Y+3, r31	; 0x03
    1478:	ea 83       	std	Y+2, r30	; 0x02
    147a:	49 91       	ld	r20, Y+
    147c:	59 91       	ld	r21, Y+
    147e:	c4 0f       	add	r28, r20
    1480:	d5 1f       	adc	r29, r21
    1482:	ec 17       	cp	r30, r28
    1484:	fd 07       	cpc	r31, r29
    1486:	61 f4       	brne	.+24     	; 0x14a0 <free+0xbe>
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	84 0f       	add	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	02 96       	adiw	r24, 0x02	; 2
    1492:	e9 01       	movw	r28, r18
    1494:	99 83       	std	Y+1, r25	; 0x01
    1496:	88 83       	st	Y, r24
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	9b 83       	std	Y+3, r25	; 0x03
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	e0 e0       	ldi	r30, 0x00	; 0
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	8d 91       	ld	r24, X+
    14a8:	9c 91       	ld	r25, X
    14aa:	13 97       	sbiw	r26, 0x03	; 3
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <free+0xd4>
    14b0:	fd 01       	movw	r30, r26
    14b2:	dc 01       	movw	r26, r24
    14b4:	f7 cf       	rjmp	.-18     	; 0x14a4 <free+0xc2>
    14b6:	8d 91       	ld	r24, X+
    14b8:	9c 91       	ld	r25, X
    14ba:	11 97       	sbiw	r26, 0x01	; 1
    14bc:	9d 01       	movw	r18, r26
    14be:	2e 5f       	subi	r18, 0xFE	; 254
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
    14ca:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	69 f4       	brne	.+26     	; 0x14ee <free+0x10c>
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <free+0x100>
    14d8:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <__flp+0x1>
    14dc:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__flp>
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <free+0x104>
    14e2:	13 82       	std	Z+3, r1	; 0x03
    14e4:	12 82       	std	Z+2, r1	; 0x02
    14e6:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <__brkval+0x1>
    14ea:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <__brkval>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <_exit>:
    14f4:	f8 94       	cli

000014f6 <__stop_program>:
    14f6:	ff cf       	rjmp	.-2      	; 0x14f6 <__stop_program>
